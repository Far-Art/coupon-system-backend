{"version":3,"sources":["Services/RouteUrls.ts","reportWebVitals.ts","ToastifyNotifications/ToastTransition.ts","Assets/Logo/logo-bordo.svg","Models/ClientType.ts","Redux/Hooks/hooks.ts","Components/LayoutArea/Header/Header.tsx","Components/LayoutArea/FlippableSignInCard/FlippableCard.tsx","Services/ApiGlobalLogic.ts","Redux/Actions/CompanyAction.ts","Redux/Actions/CouponAction.ts","Redux/Actions/CustomerAction.ts","Redux/States/CouponsAppState.ts","Models/CouponModel.ts","Redux/Actions/CartAction.ts","Redux/States/CartAppState.ts","Redux/Actions/ClientAction.ts","Redux/Actions/RevertAction.ts","Redux/States/ClientCouponsAppState.ts","Redux/States/CompaniesAppState.ts","Redux/Reducers/CompanyReducer.ts","Redux/States/CurrentClientAppState.ts","Redux/States/CustomersAppState.ts","Models/FilterType.ts","Redux/Actions/FilterAction.ts","Redux/Reducers/CustomerReducer.ts","Redux/States/FiltersAppState.ts","Redux/Actions/CategoriesAction.ts","Redux/States/CategoriesAppState.ts","Redux/Actions/ColorPaletteAction.ts","Models/ColorPaletteTypes.ts","Redux/States/ColorPaletteState.ts","Redux/Store/RootReducer.ts","Redux/Reducers/CurrentClientReducer.ts","Redux/Reducers/AppCouponsReducer.ts","Redux/Reducers/ClientCouponsReducer.ts","Redux/Reducers/FiltersReducer.ts","Redux/Reducers/CartReducer.ts","Redux/Reducers/CategoriesReducer.ts","Redux/Reducers/ColorPaletteReducer.ts","Redux/Store/Store.ts","Services/Globals.ts","Services/GlobalDataStreamer.ts","Components/LayoutArea/Logout/Logout.tsx","Services/IdleTimerApi.ts","Components/LayoutArea/Login/Login.tsx","Components/LayoutArea/Sign_up/Sign_up.tsx","Components/LayoutArea/NavBar/NavBar.tsx","Components/InputArea/AddItemElement/AddItemElement.tsx","Components/LayoutArea/Menu/Menu.tsx","Services/Currency.ts","Components/SharedArea/EmptyView/EmptyView.tsx","Components/InputArea/CheckBox/CheckBox.tsx","Components/FiltersArea/Filters/CategoriesFilter/CategoriesFilter.tsx","Components/FiltersArea/Filters/CompaniesFilter/CompaniesFilter.tsx","Components/FiltersArea/Filters/FreeTextFilter/FreeTextFilter.tsx","Components/FiltersArea/Filters/PriceFilter/PriceFilter.tsx","Components/FiltersArea/Filters/IdFilter/IdFilter.tsx","Components/FiltersArea/FiltersContainer/FiltersContainer.tsx","Components/CouponsArea/CouponCard/CouponCard.tsx","Components/InputArea/EditableTableRow/EditableTableRow.tsx","Components/CouponsArea/CouponsContainer/CouponsContainer.tsx","Components/LayoutArea/Cart/Cart.tsx","Components/InputArea/CreateCompanyForm/CreateCompanyForm.tsx","Components/InputArea/CreateCouponForm/CreateCouponForm.tsx","Components/InputArea/CreateCustomerForm/CreateCustomerForm.tsx","Components/SharedArea/Toasts/EmitActionToast.tsx","Components/CompaniesArea/CompaniesContainer/CompaniesContainer.tsx","Components/CustomersArea/CustomersContainer/CustomersContainer.tsx","Components/LayoutArea/ClientsContainer/ClientsContainer.tsx","Components/LayoutArea/MainView/MainView.tsx","Components/LayoutArea/ClientCard/ClientCard.tsx","Components/LayoutArea/ProfileView/ProfileView.tsx","Components/SharedArea/CreditsPage/CreditsPage.tsx","Components/LayoutArea/Routing/Routing.tsx","Components/LayoutArea/Footer/Footer.tsx","Components/LayoutArea/DarkMode/DarkMode.tsx","Components/LayoutArea/Layout/Layout.tsx","index.tsx"],"names":["RouteUrls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","slide_in_right","cssTransition","enter","exit","ClientType","useAppSelector","useSelector","Header","clientType","state","currentClientState","client","className","to","HOME","id","ADMIN","src","logo","alt","FlippableCard","props","useState","isDisplayed","setIsDisplayed","displayed","setdisplayed","isFlipped","setIsFlipped","flipped","setflipped","flip","onClick","buttonStyleClass","Icon","component","CloseIcon","mainButtonText","frontButtonText","frontElement","backButtonText","backElement","ApiGlobalLogic","patterns","regex","email","password","complexDate","simpleDate","numbers","string","integers","price","forms","fieldsMinLength","telephone","fieldsMaxLength","errorDescriptions","minLength","customerName","items","coupon","title","description","amount","customer","name","company","companyName","couponTitle","maxLength","badPattern","CompaniesActionType","CouponActionType","CustomerActionType","deleteCompany","companyId","type","DELETE","payload","updateCompany","UPDATE","deleteCoupon","couponId","DELETE_COUPON","updateCoupon","UPDATE_COUPON","deleteCustomer","customerId","updateCustomer","CouponsAppState","appCouponsList","CartActionType","CouponModel","companyEmail","category","startDate","endDate","imageUrl","clearCart","CLEAR_CART","ClientActionType","RevertActionType","CartAppState","forPurchaseCouponsList","loginAction","login","LOGIN","logoutAction","LOGOUT","undefined","ClientCouponsAppState","clientCouponsList","CompaniesAppState","appCompaniesList","companiesList","toUpdate","i","length","CurrentClientAppState","token","loginTimeInMillis","idleDisconnectIntervalInMillis","FilterType","FilterActionType","CustomersAppState","appCustomersList","customersList","addFilter","filterType","filter","ADD","filterKey","filterValue","clearFilters","CLEAR","FiltersAppState","categoriesList","priceList","freeText","filtersActive","CategoriesActionType","ColorPaletteType","ColorPaletteTypes","CategoriesAppState","categories","changePalette","palette","CHANGE_PALETTE","ColorPaletteState","NORMAL","rootReducer","combineReducers","action","newState","Date","now","REQUEST_INFO","EXTEND_TOKEN","couponsAppState","currentState","push","GET_SINGLE","FETCH_ALL","c","clientCouponsState","FETCH_BY_COMPANY","FETCH_BY_CUSTOMER","index","findIndex","splice","DISMISS_ALL_COUPONS","REVERT_STATE","filterAppState","CATEGORIES","PRICE","COMPANIES","TEXT","ID","REMOVE","customersAppState","companiesAppState","cartAppState","cartState","ADD_TO_CART","DELETE_FROM_CART","DELETE_BATCH_FROM_CART","includes","categoriesAppState","SYNC_CATEGORIES","map","replaceAll","colorPaletteState","paletteState","persistConfig","key","storage","blacklist","persistReducer","store","createStore","persistedReducer","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","Globals","globals","urls","signup","logout","extendToken","clientInfo","companies","customers","coupons","couponImage","purchase","GlobalDataStreamer","this","emitToast","axios","get","appendBody","response","toast","dismiss","dispatch","data","catch","error","errorToast","post","successToast","delete","put","couponIds","warnToast","info","repsonse","imageName","responseType","headers","getState","toastId","onLoading","loading","theme","closeOnClick","autoClose","update","render","isLoading","pause","purge","persist","Logout","IdleTimerApi","onMount","updateData","clientLoginTime","idleTimerThresholdInterval","resetIdleTimeout","dispatchTokenUpdateThresholdInterval","updateLoginTime","idleTimer","clearTimeout","idleTimeout","clearInterval","idleIntervalTimerActions","setTimeout","setInterval","idleTimerUpdateInterval","emitToastThresholdInterval","warn","extendTokenExpiration","initialIdleTimerThresholdInterval","emitToastValuePercentage","dispatchTokenUpdateValuePercentage","cancelTimers","dispatchToast","warning","Login","useForm","register","handleSubmit","reset","errors","formState","onSubmit","startIdleTimer","placeholder","required","value","message","pattern","Sign_up","defaultValues","CUSTOMER","setValue","setClientType","send","a","apiGlobalLogic","lastName","COMPANY","requiredFields","onChange","event","target","console","log","handleChange","NavBar","currentClient","nameToCapital","charAt","toUpperCase","substring","toLowerCase","timeOfDay","timeNow","getHours","AddItemElement","AddIcon","CREATE_COUPON","CREATE_CUSTOMER","CREATE_COMPANY","Menu","HomeIcon","active","PersonRoundedIcon","ShoppingCartIcon","AppCurrencySymbol","EmptyView","scrolling","width","height","text","CheckBox","checked","setChecked","isActive","useEffect","toString","CategoriesFilter","setCategories","Array","from","Set","CompaniesFilter","setCompanies","FreeTextFilter","control","FreeTextFilterWatched","useWatch","defaultValue","PriceFilter","evalNumber","number","Math","trunc","parseFloat","maxNumber","currentTarget","handleCHange","onMouseUp","handleDispatchValue","min","max","IdFilter","IdFilterWatched","FiltersContainer","view","setView","clients","CouponCard","find","addToCart","success","icon","validStartDate","getTime","formatDate","date","jsDate","year","getFullYear","month","getMonth","day","getDate","toFixed","EditableTableRow","object","newObject","setNewObject","inEditMode","toastComponent","objectModel","result","onSave","CheckIcon","position","setNewObjectValue","Map","Object","entries","set","fromEntries","setWarningClass","timeNowInMillis","parse","toLocaleDateString","setCellWidth","inputByValueType","onBlur","onKeyDown","blur","step","clientTypes","keys","counter","keyValueArrays","ignoreFieldsFunction","isHeader","style","nonEditableFields","editableValueValidation","tdClassName","CouponsContainer","editCouponWithId","setEditCouponWithId","setCoupons","appfilters","filteredMapFromObject","model","tempMapArray","mainLoop","ignoreFields","ignored","renderAsList","preventToast","renderAsCards","renderEmptyView","deleteFromCartHandler","item","couponsList","filteredList","onlyValid","filterCoupons","sort","random","editable","EditIcon","DeleteIcon","hideProgressBar","pauseOnHover","draggable","progress","insteadOfDisplayedText","asList","Cart","setState","removeExpiredCoupons","useCallback","toDelete","classNameHandler","isDisabledHandler","disabled","toPurchase","purchaseCoupons","buyHandler","reduce","sum","currentCoupon","CreateCompanyForm","addCompany","CreateCouponForm","addCoupon","CreateCustomerForm","addCustomer","emitActionToast","clientTypeString","isEditable","editCallback","editCallbackParam","deleteCallback","deleteCallbackParam","CompaniesContainer","editCompanyWithId","setEditCompanyWithId","filterCustomers","CustomersContainer","editCustomerWithId","setEditCustomerWithId","setCustomers","ClientsContainer","allCustomers","allCompanies","MainView","clientCoupons","appCoupons","fetchAllCategories","fetchCouponsByCompany","fetchCouponsByCustomer","fetchAllCoupons","fetchAllCustomers","fetchAllCompanies","document","body","scrollTop","documentElement","ClientCard","camelCaseSplit","word","newWord","letter","test","blurStyle","objectEntries","testValue","textTransform","renderTable","ProfileView","fetchClientInfo","dismissAllCoupons","CreditsPage","rel","href","Routing","path","exact","PROFILE","CART","Footer","DarkMode","colorPalette","toggled","setToggled","clickHandle","DARK","NightlightIcon","WbSunnyIcon","Layout","clientMadeAction","limit","transition","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ef081cc.chunk.js","sourcesContent":["export enum RouteUrls{\r\n    HOME = \"/home\",\r\n    LOGIN = \"/login\",\r\n    SIGNUP = \"/signup\",\r\n    LOGOUT = \"/logout\",\r\n    COMPANIES = \"/companies\",\r\n    CUSTOMERS = \"/customers\",\r\n    COUPONS = \"/coupons\",\r\n    CART = \"/cart\",\r\n    PROFILE = \"/profile\",\r\n    CREATE_COUPON = \"/createpage/coupon\",\r\n    CREATE_COMPANY = \"/createpage/company\",\r\n    CREATE_CUSTOMER = \"/createpage/customer\"\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { cssTransition } from \"react-toastify\";\r\n\r\nconst slide_in_right = cssTransition({\r\n    enter: \"slide-in\",\r\n    exit: \"slide-out\"\r\n});\r\n\r\nexport default slide_in_right;","export default __webpack_public_path__ + \"static/media/logo-bordo.9a59480f.svg\";","export enum ClientType {\r\n    ADMIN = \"ADMIN\",\r\n    CUSTOMER = \"CUSTOMER\",\r\n    COMPANY = \"COMPANY\"\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../Store/Store\";\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import \"./Header.css\";\r\nimport logo from \"../../../Assets/Logo/logo-bordo.svg\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { RouteUrls } from \"../../../Services/RouteUrls\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\n\r\nexport default function Header(): JSX.Element {\r\n\r\n    const clientType = useAppSelector(state =>\r\n        state.currentClientState.client?.clientType\r\n    );\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            <NavLink to={RouteUrls.HOME}>\r\n                <div className=\"Header_Background\">\r\n                    <img id=\"logo\" className={clientType === ClientType.ADMIN ? \"RotateLogo\" : \"\"} src={logo} alt=\"logo\" />\r\n                    <h1>Coupon As Art</h1>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}","import \"./FlippableCard.css\";\r\nimport { ReactElement, useState } from \"react\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\ninterface FlippableProps {\r\n    mainButtonText?: string;\r\n    frontElement?: ReactElement<any, any>;\r\n    backElement?: ReactElement<any, any>;\r\n    frontButtonText?: string;\r\n    backButtonText?: string;\r\n    buttonStyleClass?: string;\r\n}\r\n\r\nfunction FlippableCard(props: FlippableProps): JSX.Element {\r\n\r\n\r\n    const [isDisplayed, setIsDisplayed] = useState(false);\r\n    const [displayed, setdisplayed] = useState(\"\");\r\n\r\n    const [isFlipped, setIsFlipped] = useState(false);\r\n    const [flipped, setflipped] = useState(\"\");\r\n\r\n    function flip() {\r\n        if (isFlipped) {\r\n            setIsFlipped(false);\r\n            setflipped(\"\");\r\n        } else {\r\n            setIsFlipped(true);\r\n            setflipped(\"flipped\");\r\n        }\r\n    }\r\n\r\n    function display() {\r\n        if (isDisplayed) {\r\n            setIsDisplayed(false);\r\n            setdisplayed(\"\");\r\n        } else {\r\n            setIsDisplayed(true);\r\n            setdisplayed(\"ShowLoginMenu\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"FlippableCard\">\r\n                <button onClick={() => display()} className={props.buttonStyleClass ? props.buttonStyleClass : \"\"} > {!isDisplayed ? props.mainButtonText ? props.mainButtonText : \"2 Sided Card\" : <Icon component={CloseIcon} />}</button>\r\n                <div className={\"card \" + flipped + \" \" + displayed}>\r\n                    <div className=\"front face\">\r\n                        <button onClick={() => flip()} className={\"ROTATE \" + props.buttonStyleClass ? props.buttonStyleClass : \"\"}> {props.frontButtonText ? props.frontButtonText : \"Rotate\"} </button>\r\n                        {props.frontElement ? props.frontElement : <div>Face of a card</div>}\r\n                    </div>\r\n                    <div className=\"back face\">\r\n                        <button onClick={() => flip()} className={\"ROTATE \" + props.buttonStyleClass ? props.buttonStyleClass : \"\"}> {props.backButtonText ? props.backButtonText : \"Rotate\"} </button>\r\n                        {props.backElement ? props.backElement : <div>Back of a card</div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FlippableCard;","export default class ApiGlobalLogic{\r\n\r\n    public static patterns = {\r\n        regex:{\r\n            email: /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$/,\r\n            password: /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])/,\r\n            complexDate: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/,\r\n            simpleDate: /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/,\r\n            numbers: /^\\d+$/\r\n        },\r\n        string: {\r\n            complexDate: \"(?:19|20)(?:(?:[13579][26]|[02468][048])-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))|(?:[0-9]{2}-(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:29|30))|(?:(?:0[13578]|1[02])-31)))\",\r\n            integers: \"[0-9]\",\r\n            price: \"d+(,d{2})?\"\r\n        }\r\n    }\r\n\r\n    public static forms = {\r\n        fieldsMinLength: {\r\n            email: 4,\r\n            password: 6,\r\n            telephone: 9\r\n        },\r\n\r\n        fieldsMaxLength: {\r\n            email: 50,\r\n            password: 16,\r\n            telephone: 10\r\n        }\r\n    }\r\n\r\n    public static items = {\r\n        coupon: {\r\n            fieldsMinLength: {\r\n                title: 2,\r\n                description: 0,\r\n                amount: 0,\r\n                price: 0\r\n            },\r\n    \r\n            fieldsMaxLength: {\r\n                title: 60,\r\n                description: 200,\r\n                price: 9999,\r\n                amount: 2147483647\r\n            }\r\n        },\r\n        customer: {\r\n            fieldsMinLength: {\r\n                name: 1\r\n            },\r\n            fieldsMaxLength: {\r\n                name: 60\r\n            }\r\n        },\r\n        company: {\r\n            fieldsMinLength: {\r\n                name: 2\r\n            },\r\n            fieldsMaxLength: {\r\n                name: 200\r\n            }\r\n        },\r\n    }\r\n\r\n    public static errorDescriptions = {\r\n        minLength: {\r\n            customerName: `Name must include at least ${ApiGlobalLogic.items.customer.fieldsMinLength.name} characters`,\r\n            companyName: `Company name must include at least ${ApiGlobalLogic.items.company.fieldsMinLength.name} characters`,\r\n            email: `Email must include at least ${ApiGlobalLogic.forms.fieldsMinLength.email} characters`,\r\n            password: `Password must include at least ${ApiGlobalLogic.forms.fieldsMinLength.password} symbols`,\r\n            telephone: `Telephone must include at least ${ApiGlobalLogic.forms.fieldsMinLength.telephone} numbers`,\r\n            couponTitle: `Title must include at least ${ApiGlobalLogic.items.coupon.fieldsMinLength.title} characters`,\r\n            price: `Price must start from ${ApiGlobalLogic.items.coupon.fieldsMinLength.price}`\r\n        },\r\n\r\n        maxLength: {\r\n            customerName: `Name cannot exceed ${ApiGlobalLogic.items.customer.fieldsMaxLength.name} characters`,\r\n            companyName: `Company name cannot exceed ${ApiGlobalLogic.items.company.fieldsMaxLength.name} characters`,\r\n            email: `Email cannot exceed ${ApiGlobalLogic.forms.fieldsMaxLength.email} characters`,\r\n            password: `Password cannot exceed ${ApiGlobalLogic.forms.fieldsMaxLength.password} symbols`,\r\n            telephone: `Telephone cannot exceed ${ApiGlobalLogic.forms.fieldsMaxLength.telephone} numbers`,\r\n            amount: `Amount cannot exceed ${ApiGlobalLogic.items.coupon.fieldsMaxLength.amount}`,\r\n            price: `Price cannot exceed ${ApiGlobalLogic.items.coupon.fieldsMaxLength.price}`,\r\n            title: `Title cannot exceed ${ApiGlobalLogic.items.coupon.fieldsMaxLength.title} characters`,\r\n            description: `Description cannot exceed ${ApiGlobalLogic.items.coupon.fieldsMaxLength.description} characters`\r\n        },\r\n\r\n        badPattern: {\r\n            email: \"Bad email pattern\",\r\n            password: \"Password must include at least one UPPERCASE letter, one lowercase letter and one digit\",\r\n            amount: \"Amount must be a whole positive number\"\r\n        }\r\n    }\r\n}","import { CompanyModel } from \"../../Models/CompanyModel\";\r\n\r\nexport interface CompanyAction {\r\n    type: CompaniesActionType;\r\n    payload?: any;\r\n}\r\n\r\nexport enum CompaniesActionType {\r\n    ADD = \"ADD_COMPANY\",\r\n    GET_SINGLE = \"GET_SINGLE_COMPANY\",\r\n    FETCH_ALL = \"FETCH_ALL_COMPANIES\",\r\n    DELETE = \"DELETE_COMPANY\",\r\n    UPDATE = \"UPDATE_COMPANY\",\r\n}\r\n\r\nexport function addCompany(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.ADD, payload: company };\r\n}\r\n\r\nexport function getSingleCompany(companyId: number): CompanyAction {\r\n    return { type: CompaniesActionType.GET_SINGLE, payload: companyId };\r\n}\r\n\r\nexport function fetchAllCompanies(companies: CompanyModel[]): CompanyAction {\r\n    return { type: CompaniesActionType.FETCH_ALL, payload: companies };\r\n}\r\n\r\nexport function deleteCompany(companyId: number): CompanyAction {\r\n    return { type: CompaniesActionType.DELETE, payload: companyId };\r\n}\r\n\r\nexport function updateCompany(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.UPDATE, payload: company };\r\n}","import { CouponModel } from \"../../Models/CouponModel\";\r\n\r\nexport interface CouponAction {\r\n    type: CouponActionType;\r\n    payload?: any;\r\n}\r\n\r\nexport enum CouponActionType {\r\n    ADD = \"ADD_COUPON\",\r\n    GET_SINGLE = \"GET_SINGLE_COUPON\",\r\n    FETCH_ALL = \"FETCH_ALL_COUPONS\",\r\n    FETCH_BY_COMPANY = \"FETCH_BY_COMPANY\",\r\n    FETCH_BY_CUSTOMER = \"FETCH_BY_CUSTOMER\",\r\n    DELETE_COUPON = \"DELETE_COUPON\",\r\n    UPDATE_COUPON = \"UPDATE_COUPON\",\r\n    DISMISS_ALL_COUPONS = \"DISMISS_ALL_COUPONS\"\r\n}\r\n\r\nexport function addCoupon(coupon: CouponModel): CouponAction {\r\n    return { type: CouponActionType.ADD, payload: coupon };\r\n}\r\n\r\nexport function getSingleCoupon(couponId: number): CouponAction {\r\n    return { type: CouponActionType.GET_SINGLE, payload: couponId };\r\n}\r\n\r\nexport function fetchAllCoupons(coupons: CouponModel[]): CouponAction {\r\n    return { type: CouponActionType.FETCH_ALL, payload: coupons };\r\n}\r\n\r\nexport function fetchCouponsByCompany(coupons: CouponModel[]): CouponAction {\r\n    return { type: CouponActionType.FETCH_BY_COMPANY, payload: coupons };\r\n}\r\n\r\nexport function fetchCouponsByCustomer(coupons: CouponModel[]): CouponAction {\r\n    return { type: CouponActionType.FETCH_BY_CUSTOMER, payload: coupons };\r\n}\r\n\r\nexport function deleteCoupon(couponId: number): CouponAction {\r\n    return { type: CouponActionType.DELETE_COUPON, payload: couponId };\r\n}\r\n\r\nexport function updateCoupon(coupon: CouponModel): CouponAction {\r\n    return { type: CouponActionType.UPDATE_COUPON, payload: coupon };\r\n}\r\n\r\nexport function dismissAllCoupons(): CouponAction {\r\n    return { type: CouponActionType.DISMISS_ALL_COUPONS };\r\n}","import { CustomerModel } from \"../../Models/CustomerModel\";\r\n\r\nexport interface CustomerAction {\r\n    type: CustomerActionType;\r\n    payload?: any;\r\n}\r\n\r\nexport enum CustomerActionType {\r\n    ADD = \"ADD_CUSTOMER\",\r\n    GET_SINGLE = \"GET_SINGLE_CUSTOMER\",\r\n    FETCH_ALL = \"FETCH_ALL_CUSTOMERS\",\r\n    DELETE = \"DELETE_CUSTOMER\",\r\n    UPDATE = \"UPDATE_CUSTOMER\",\r\n}\r\n\r\nexport function addCustomer(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomerActionType.ADD, payload: customer };\r\n}\r\n\r\nexport function getSingleCustomer(customerId: number): CustomerAction {\r\n    return { type: CustomerActionType.GET_SINGLE, payload: customerId };\r\n}\r\n\r\nexport function fetchAllCustomers(customers: CustomerModel[]): CustomerAction {\r\n    return { type: CustomerActionType.FETCH_ALL, payload: customers };\r\n}\r\n\r\nexport function deleteCustomer(customerId: number): CustomerAction {\r\n    return { type: CustomerActionType.DELETE, payload: customerId };\r\n}\r\n\r\nexport function updateCustomer(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomerActionType.UPDATE, payload: customer };\r\n}","import { CouponModel } from \"../../Models/CouponModel\";\r\n\r\nexport class CouponsAppState {\r\n    appCouponsList: CouponModel[] = [];\r\n}","import { CompanyModel } from \"./CompanyModel\";\r\n\r\nexport class CouponModel {\r\n    id!: number;\r\n    companyName!: string;\r\n    companyEmail!: string;\r\n    company!: CompanyModel;\r\n    category!: string;\r\n    title!: string;\r\n    description?: string;\r\n    startDate!: Date;\r\n    endDate!: Date;\r\n    amount!: number;\r\n    price!: number;\r\n    imageUrl?: string;\r\n}","import { CouponModel } from \"../../Models/CouponModel\";\r\n\r\nexport interface CartAction {\r\n    type: CartActionType;\r\n    payload: CouponModel | number[];\r\n}\r\n\r\nexport enum CartActionType {\r\n    ADD_TO_CART = \"ADD_TO_CART\",\r\n    DELETE_FROM_CART = \"DELETE_FROM_CART\",\r\n    DELETE_BATCH_FROM_CART = \"DELETE_BATCH_FROM_CART\",\r\n    CLEAR_CART = \"CLEAR_CART\"\r\n}\r\n\r\nexport function addToCart(coupon: CouponModel): CartAction {\r\n    return { type: CartActionType.ADD_TO_CART, payload: coupon };\r\n}\r\n\r\nexport function deleteFromCart(item: CouponModel): CartAction {\r\n    return { type: CartActionType.DELETE_FROM_CART, payload: item };\r\n}\r\n\r\nexport function deleteInBatchFromCart(items: number[]): CartAction {\r\n    return { type: CartActionType.DELETE_BATCH_FROM_CART, payload: items };\r\n}\r\n\r\nexport function clearCart(): CartAction {\r\n    return { type: CartActionType.CLEAR_CART, payload: new CouponModel() };\r\n}","import { CouponModel } from \"../../Models/CouponModel\";\r\n\r\nexport class CartAppState {\r\n    forPurchaseCouponsList: CouponModel[] = [];\r\n}","import { ClientInfoModel } from \"../../Models/ClientInfoModel\";\r\nimport { ClientType } from \"../../Models/ClientType\";\r\nimport { LoginResponseModel } from \"../../Models/LoginResponseModel\";\r\n\r\nexport interface ClientAction {\r\n    type: ClientActionType;\r\n    clientType?: ClientType;\r\n    payload?: any;\r\n}\r\n\r\nexport enum ClientActionType {\r\n    LOGIN = \"LOGIN\",\r\n    LOGOUT = \"LOGOUT\",\r\n    REQUEST_INFO = \"REQUEST_INFO\",\r\n    EXTEND_TOKEN = \"EXTEND_TOKEN\"\r\n}\r\n\r\nexport function loginAction(login: LoginResponseModel): ClientAction {\r\n    return { type: ClientActionType.LOGIN, clientType: login.clientType, payload: login };\r\n}\r\n\r\nexport function logoutAction(): ClientAction {\r\n    return { type: ClientActionType.LOGOUT, clientType: undefined };\r\n}\r\n\r\nexport function requestInfo(info: ClientInfoModel): ClientAction {\r\n    return { type: ClientActionType.REQUEST_INFO, clientType: info.clientType, payload: info };\r\n}\r\n\r\nexport function extendToken(): ClientAction {\r\n    return { type: ClientActionType.EXTEND_TOKEN };\r\n}","export interface RevertAction {\r\n    type: RevertActionType;\r\n}\r\n\r\nexport enum RevertActionType {\r\n    REVERT_STATE = \"REVERT_STATE\"\r\n}\r\n\r\nexport function revertState(): RevertAction {\r\n    return { type: RevertActionType.REVERT_STATE };\r\n}","import { CouponModel } from \"../../Models/CouponModel\";\r\n\r\nexport class ClientCouponsAppState {\r\n    clientCouponsList: CouponModel[] = [];\r\n}","import { CompanyModel } from \"../../Models/CompanyModel\";\r\n\r\nexport class CompaniesAppState {\r\n    appCompaniesList: CompanyModel[] = [];\r\n}","import { CompanyModel } from \"../../Models/CompanyModel\";\r\nimport { CompaniesActionType, CompanyAction } from \"../Actions/CompanyAction\";\r\nimport { CompaniesAppState } from \"../States/CompaniesAppState\";\r\n\r\nexport function companyReducer(currentState: CompaniesAppState = new CompaniesAppState(), action: CompanyAction): CompaniesAppState {\r\n\r\n    //TODO Check this FC for proper functionality\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CompaniesActionType.ADD:\r\n            newState.appCompaniesList.push(action.payload);\r\n            break;\r\n        case CompaniesActionType.GET_SINGLE:\r\n            newState.appCompaniesList = action.payload;\r\n            break;\r\n        case CompaniesActionType.FETCH_ALL:\r\n            newState.appCompaniesList = action.payload;\r\n            break;\r\n        case CompaniesActionType.DELETE:\r\n            newState.appCompaniesList = newState.appCompaniesList.filter(c => c.id !== action.payload);\r\n            break;\r\n        case CompaniesActionType.UPDATE:\r\n            newState.appCompaniesList = updateCompany(newState.appCompaniesList, action.payload);\r\n            break;\r\n        default:\r\n            return currentState;\r\n    }\r\n    return newState;\r\n}\r\n\r\nfunction updateCompany(companiesList: CompanyModel[], toUpdate: CompanyModel): CompanyModel[] {\r\n    for (let i = 0; i < companiesList.length; i++) {\r\n        if (companiesList[i].id === toUpdate.id) {\r\n            companiesList[i] = { ...toUpdate };\r\n        }\r\n    }\r\n    return companiesList;\r\n}","import { AdminModel } from \"../../Models/AdminModel\";\r\nimport { CompanyModel } from \"../../Models/CompanyModel\";\r\nimport { CustomerModel } from \"../../Models/CustomerModel\";\r\n\r\nexport class CurrentClientAppState {\r\n    client: CustomerModel | CompanyModel | AdminModel | undefined;\r\n    token: string | undefined;\r\n    loginTimeInMillis: number | undefined;\r\n    idleDisconnectIntervalInMillis: number | undefined;\r\n}","import { CustomerModel } from \"../../Models/CustomerModel\";\r\n\r\nexport class CustomersAppState {\r\n    appCustomersList: CustomerModel[] = [];\r\n}","export enum FilterType {\r\n    ID = \"ID\",\r\n    CATEGORIES = \"CATEGORIES\",\r\n    PRICE = \"PRICE\",\r\n    COMPANIES = \"COMPANIES\",\r\n    TEXT = \"TEXT\"\r\n}","import { FilterType } from \"../../Models/FilterType\";\r\n\r\nexport interface FilterAction {\r\n    type: FilterActionType;\r\n    filterKey?: FilterType;\r\n    filterValue?: any;\r\n}\r\n\r\nexport enum FilterActionType {\r\n    ADD = \"ADD_FILTER\",\r\n    REMOVE = \"REMOVE_FILTER\",\r\n    CLEAR = \"CLEAR_FILTERS\"\r\n}\r\n\r\nexport function addFilter(filterType: FilterType, filter: any): FilterAction {\r\n    return { type: FilterActionType.ADD, filterKey: filterType, filterValue: filter };\r\n}\r\n\r\nexport function removeFilter(filterType: FilterType, filter: any): FilterAction {\r\n    return { type: FilterActionType.REMOVE, filterKey: filterType, filterValue: filter };\r\n}\r\n\r\nexport function clearFilters(): FilterAction {\r\n    return { type: FilterActionType.CLEAR };\r\n}","import { CustomerModel } from \"../../Models/CustomerModel\";\r\nimport { CustomerAction, CustomerActionType } from \"../Actions/CustomerAction\";\r\nimport { CustomersAppState } from \"../States/CustomersAppState\";\r\n\r\nexport function customerReducer(currentState: CustomersAppState = new CustomersAppState(), action: CustomerAction): CustomersAppState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CustomerActionType.ADD:\r\n            newState.appCustomersList.push(action.payload);\r\n            break;\r\n        case CustomerActionType.GET_SINGLE:\r\n            newState.appCustomersList = action.payload;\r\n            break;\r\n        case CustomerActionType.FETCH_ALL:\r\n            newState.appCustomersList = action.payload;\r\n            break;\r\n        case CustomerActionType.DELETE:\r\n            newState.appCustomersList = newState.appCustomersList.filter(c => c.id !== action.payload);\r\n            break;\r\n        case CustomerActionType.UPDATE:\r\n            newState.appCustomersList = updateCustomer(newState.appCustomersList, action.payload);\r\n            break;\r\n        default:\r\n            return currentState;\r\n    }\r\n    return newState;\r\n}\r\n\r\nfunction updateCustomer(customersList: CustomerModel[], toUpdate: CustomerModel): CustomerModel[] {\r\n    for (let i = 0; i < customersList.length; i++) {\r\n        if (customersList[i].id === toUpdate.id) {\r\n            customersList[i] = { ...toUpdate };\r\n        }\r\n    }\r\n    return customersList;\r\n}","export class FiltersAppState {\r\n    id: number = -99; // initial value must be less than zero\r\n    categoriesList: string[] = [];\r\n    priceList: number = -99; // initial value must be less than zero\r\n    companiesList: string[] = [];\r\n    freeText: string = \"\";\r\n    /* set true if any of filters is initialized*/\r\n    filtersActive: boolean = false;\r\n}","export interface CategoriesAction {\r\n    type: CategoriesActionType;\r\n    payload: string[];\r\n}\r\n\r\nexport enum CategoriesActionType {\r\n    SYNC_CATEGORIES = \"SYNC_CATEGORIES\"\r\n}\r\n\r\nexport function syncCategories(categories: string[]): CategoriesAction {\r\n    return { type: CategoriesActionType.SYNC_CATEGORIES, payload: categories };\r\n}","export class CategoriesAppState {\r\n    categories: string[] = [];\r\n}","import { ColorPaletteTypes } from \"../../Models/ColorPaletteTypes\";\r\n\r\nexport interface ColorPaletteAction {\r\n    type: ColorPaletteType;\r\n    payload: ColorPaletteTypes;\r\n}\r\n\r\nexport enum ColorPaletteType {\r\n    CHANGE_PALETTE = \"CHANGE_PALETTE\"\r\n}\r\n\r\nexport function changePalette(palette: ColorPaletteTypes): ColorPaletteAction {\r\n    return { type: ColorPaletteType.CHANGE_PALETTE, payload: palette };\r\n}","export enum ColorPaletteTypes {\r\n    NORMAL = \"NORMAL\",\r\n    DARK = \"DARK\"\r\n}","import { ColorPaletteTypes } from \"../../Models/ColorPaletteTypes\";\r\n\r\nexport class ColorPaletteState {\r\n    palette: ColorPaletteTypes = ColorPaletteTypes.NORMAL;\r\n}","import { combineReducers } from \"redux\";\r\nimport { appCouponsReducer } from \"../Reducers/AppCouponsReducer\";\r\nimport cartReducer from \"../Reducers/CartReducer\";\r\nimport { clientCouponsReducer } from \"../Reducers/ClientCouponsReducer\";\r\nimport { companyReducer } from \"../Reducers/CompanyReducer\";\r\nimport currentClientReducer from \"../Reducers/CurrentClientReducer\";\r\nimport { customerReducer } from \"../Reducers/CustomerReducer\";\r\nimport { FiltersReducer } from \"../Reducers/FiltersReducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport categoriesReducer from \"../Reducers/CategoriesReducer\";\r\nimport colorPaletteReducer from \"../Reducers/ColorPaletteReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    currentClientState: currentClientReducer,\r\n    couponsAppState: appCouponsReducer,\r\n    clientCouponsState: clientCouponsReducer,\r\n    filterAppState: FiltersReducer,\r\n    customersAppState: customerReducer,\r\n    companiesAppState: companyReducer,\r\n    cartAppState: cartReducer,\r\n    categoriesAppState: categoriesReducer,\r\n    colorPaletteState: colorPaletteReducer\r\n});\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage: storage,\r\n    blacklist: [\r\n        \"couponsAppState\",\r\n        \"customersAppState\",\r\n        \"companiesAppState\",\r\n        \"clientCouponsState\",\r\n        \"filterAppState\"\r\n    ]\r\n}\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import { LoginResponseModel } from \"../../Models/LoginResponseModel\";\r\nimport { ClientAction, ClientActionType } from \"../Actions/ClientAction\";\r\nimport { CurrentClientAppState } from \"../States/CurrentClientAppState\";\r\n\r\nexport default function currentClientReducer(currentClientState: CurrentClientAppState = new CurrentClientAppState(), action: ClientAction): CurrentClientAppState {\r\n\r\n    const newState = { ...currentClientState };\r\n\r\n    switch (action.type) {\r\n        case ClientActionType.LOGIN:\r\n            newState.client = action.payload\r\n            newState.token = (action.payload as LoginResponseModel).token;\r\n            newState.loginTimeInMillis = Date.now();\r\n            newState.idleDisconnectIntervalInMillis = (action.payload as LoginResponseModel).idleDisconnectIntervalInMillis;\r\n            break;\r\n        case ClientActionType.LOGOUT:\r\n            newState.client = undefined;\r\n            newState.token = undefined;\r\n            newState.loginTimeInMillis = undefined;\r\n            newState.idleDisconnectIntervalInMillis = undefined;\r\n            break;\r\n        case ClientActionType.REQUEST_INFO:\r\n            newState.client = action.payload;\r\n            newState.token = currentClientState.token;\r\n            break;\r\n        case ClientActionType.EXTEND_TOKEN:\r\n            newState.loginTimeInMillis = Date.now();\r\n            break;\r\n        default:\r\n            return currentClientState\r\n    }\r\n    return newState;\r\n}","import { CouponAction, CouponActionType } from \"../Actions/CouponAction\";\r\nimport { CouponsAppState } from \"../States/CouponsAppState\";\r\n\r\nexport function appCouponsReducer(currentState: CouponsAppState = new CouponsAppState(), action: CouponAction): CouponsAppState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CouponActionType.ADD:\r\n            newState.appCouponsList.push(action.payload);\r\n            break;\r\n        case CouponActionType.GET_SINGLE:\r\n            newState.appCouponsList = action.payload;\r\n            break;\r\n        case CouponActionType.FETCH_ALL:\r\n            newState.appCouponsList = action.payload;\r\n            break;\r\n        case CouponActionType.DELETE_COUPON:\r\n            newState.appCouponsList = newState.appCouponsList.filter(c => c.id !== action.payload);\r\n            break;\r\n        default:\r\n            return currentState;\r\n    }\r\n    return newState;\r\n}","import { ClientAction, ClientActionType } from \"../Actions/ClientAction\";\r\nimport { CouponAction, CouponActionType } from \"../Actions/CouponAction\";\r\nimport { RevertAction, RevertActionType } from \"../Actions/RevertAction\";\r\nimport { ClientCouponsAppState } from \"../States/ClientCouponsAppState\";\r\n\r\nexport function clientCouponsReducer(currentState: ClientCouponsAppState = new ClientCouponsAppState(), action: CouponAction | ClientAction | RevertAction): ClientCouponsAppState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CouponActionType.FETCH_BY_COMPANY:\r\n            newState.clientCouponsList = action.payload;\r\n            break;\r\n        case CouponActionType.FETCH_BY_CUSTOMER:\r\n            newState.clientCouponsList = action.payload;\r\n            break;\r\n        case CouponActionType.UPDATE_COUPON:\r\n            const index = newState.clientCouponsList.findIndex(c => c.id === action.payload.id);\r\n            if(index > -1){\r\n                newState.clientCouponsList.splice(index, 1, action.payload);\r\n            }\r\n            break;\r\n        case CouponActionType.DELETE_COUPON:\r\n            newState.clientCouponsList = newState.clientCouponsList.filter(c => c.id !== action.payload);\r\n            break;\r\n        case ClientActionType.LOGOUT:\r\n            newState.clientCouponsList = [];\r\n            break;\r\n        case CouponActionType.DISMISS_ALL_COUPONS:\r\n            newState.clientCouponsList = [];\r\n            break;\r\n        case RevertActionType.REVERT_STATE:\r\n            return currentState;\r\n        default:\r\n            return currentState;\r\n    }\r\n    return newState;\r\n}","import { FilterType } from \"../../Models/FilterType\";\r\nimport { FilterAction, FilterActionType } from \"../Actions/FilterAction\";\r\nimport { FiltersAppState } from \"../States/FiltersAppState\";\r\n\r\nexport function FiltersReducer(currentState: FiltersAppState = new FiltersAppState(), action: FilterAction): FiltersAppState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        /* Adding filter */\r\n        case FilterActionType.ADD:\r\n            newState.filtersActive = true;\r\n            switch (action.filterKey) {\r\n                case FilterType.CATEGORIES:\r\n                    newState.categoriesList.push(action.filterValue);\r\n                    break;\r\n                case FilterType.PRICE:\r\n                    newState.priceList = action.filterValue;\r\n                    break;\r\n                case FilterType.COMPANIES:\r\n                    newState.companiesList.push(action.filterValue);\r\n                    break;\r\n                case FilterType.TEXT:\r\n                    newState.freeText = action.filterValue;\r\n                    break;\r\n                case FilterType.ID:\r\n                    newState.id = +action.filterValue;\r\n                    break;\r\n            }\r\n            break;\r\n\r\n        /* Removing filter */\r\n        case FilterActionType.REMOVE:\r\n            switch (action.filterKey) {\r\n                case FilterType.CATEGORIES:\r\n                    newState.categoriesList = newState.categoriesList.filter(c => c !== action.filterValue);\r\n                    break;\r\n                case FilterType.PRICE:\r\n                    newState.priceList = 0;\r\n                    break;\r\n                case FilterType.COMPANIES:\r\n                    newState.companiesList = [];\r\n                    break;\r\n                case FilterType.TEXT:\r\n                    newState.freeText = \"\";\r\n                    break;\r\n            }\r\n            break;\r\n        case FilterActionType.CLEAR:\r\n            newState.id = -99;\r\n            newState.categoriesList = [];\r\n            newState.companiesList = [];\r\n            newState.priceList = -99;\r\n            newState.freeText = \"\";\r\n            break;\r\n        default:\r\n            return currentState;\r\n    }\r\n\r\n    /* check if all filters disabled */\r\n    if (newState.id < 0 && newState.categoriesList.length === 0 && newState.companiesList.length === 0 && newState.priceList < 0 && newState.freeText.length === 0) {\r\n        newState.filtersActive = false;\r\n    }\r\n\r\n    return newState;\r\n}","import { CouponModel } from \"../../Models/CouponModel\";\r\nimport { CartAction, CartActionType } from \"../Actions/CartAction\";\r\nimport { CartAppState } from \"../States/CartAppState\";\r\n\r\nexport default function cartReducer(cartState: CartAppState = new CartAppState(), action: CartAction): CartAppState {\r\n\r\n    const newState = { ...cartState };\r\n\r\n    switch (action.type) {\r\n        case CartActionType.ADD_TO_CART:\r\n            newState.forPurchaseCouponsList.push(action.payload as CouponModel);\r\n            break;\r\n        case CartActionType.DELETE_FROM_CART:\r\n            newState.forPurchaseCouponsList = newState.forPurchaseCouponsList.filter(c => c !== action.payload);\r\n            break;\r\n        case CartActionType.DELETE_BATCH_FROM_CART:\r\n            newState.forPurchaseCouponsList = newState.forPurchaseCouponsList.filter(c => (!(action.payload as number[]).includes(c.id)));\r\n            break;\r\n        case CartActionType.CLEAR_CART:\r\n            newState.forPurchaseCouponsList = [];\r\n            break;\r\n        default:\r\n            return cartState;\r\n    }\r\n    return newState;\r\n}","import { CategoriesAction, CategoriesActionType } from \"../Actions/CategoriesAction\";\r\nimport { CategoriesAppState } from \"../States/CategoriesAppState\";\r\n\r\nexport default function categoriesReducer(categoriesAppState: CategoriesAppState = new CategoriesAppState(), action: CategoriesAction): CategoriesAppState {\r\n\r\n    const newState = { ...categoriesAppState };\r\n\r\n    switch (action.type) {\r\n        case CategoriesActionType.SYNC_CATEGORIES:\r\n            newState.categories = action.payload.map(c => c.replaceAll(\"_\", \" \"));\r\n            break;\r\n        default:\r\n            return categoriesAppState;\r\n    }\r\n    return newState;\r\n\r\n}","import { ColorPaletteAction, ColorPaletteType } from \"../Actions/ColorPaletteAction\";\r\nimport { ColorPaletteState } from \"../States/ColorPaletteState\";\r\n\r\nexport default function colorPaletteReducer(paletteState: ColorPaletteState = new ColorPaletteState(), action: ColorPaletteAction): ColorPaletteState {\r\n\r\n    const newState = { ...paletteState };\r\n\r\n    switch (action.type) {\r\n        case ColorPaletteType.CHANGE_PALETTE:\r\n            newState.palette = action.payload;\r\n            break;\r\n        default:\r\n            return paletteState;\r\n    }\r\n    return newState;\r\n}","import { createStore } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport persistedReducer from \"./RootReducer\"\r\n\r\n// // Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const store = createStore(persistedReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nconst reduxPersistedStore = {\r\n    store,\r\n    persistor\r\n}\r\n\r\nexport default reduxPersistedStore;","class Globals{\r\n}\r\n\r\nclass DevelopmentGlobals extends Globals{\r\n    public urls = {\r\n        signup: \"http://localhost:8080/register\",\r\n        login: \"http://localhost:8080/login\",\r\n        logout: \"http://localhost:8080/logout\",\r\n        extendToken: \"http://localhost:8080/extendtoken\",\r\n        clientInfo: \"http://localhost:8080/client/info\",\r\n        companies: \"http://localhost:8080/companies\",\r\n        customers: \"http://localhost:8080/customers\",\r\n        coupons: \"http://localhost:8080/coupons\",\r\n        couponImage: \"http://localhost:8080/coupons/images\",\r\n        categories: \"http://localhost:8080/coupons/categories\",\r\n        purchase : \"http://localhost:8080/customers/purchase\"\r\n    }\r\n}\r\n\r\nclass ProductionGlobals extends Globals{\r\n    public urls = {\r\n        signup: \"/register\",\r\n        login: \"/login\",\r\n        logout: \"/logout\",\r\n        extendToken: \"/extendtoken\",\r\n        clientInfo: \"/client/info\",\r\n        companies: \"/companies\",\r\n        customers: \"/customers\",\r\n        coupons: \"/coupons\",\r\n        couponImage: \"/coupons/images\",\r\n        categories: \"/coupons/categories\",\r\n        purchase : \"/customers/purchase\"\r\n    }\r\n}\r\n\r\nconst globals = process.env.NODE_ENV === 'production' ? new ProductionGlobals() : new DevelopmentGlobals();\r\n\r\nexport default globals;","import axios from \"axios\";\r\nimport { CompanyModel } from \"../Models/CompanyModel\";\r\nimport { CouponModel } from \"../Models/CouponModel\";\r\nimport { CustomerModel } from \"../Models/CustomerModel\";\r\nimport { deleteCompany, fetchAllCompanies, updateCompany } from \"../Redux/Actions/CompanyAction\";\r\nimport { deleteCoupon, dismissAllCoupons, fetchAllCoupons, fetchCouponsByCompany, fetchCouponsByCustomer, updateCoupon } from \"../Redux/Actions/CouponAction\";\r\nimport { deleteCustomer, fetchAllCustomers, updateCustomer } from \"../Redux/Actions/CustomerAction\";\r\nimport { store } from \"../Redux/Store/Store\";\r\nimport globals from \"./Globals\";\r\nimport { syncCategories } from \"../Redux/Actions/CategoriesAction\";\r\nimport { toast } from \"react-toastify\";\r\nimport { LoginRequestModel } from \"../Models/LoginRequestModel\";\r\nimport { LoginResponseModel } from \"../Models/LoginResponseModel\";\r\nimport { loginAction, logoutAction, requestInfo } from \"../Redux/Actions/ClientAction\";\r\nimport { ClientInfoModel } from \"../Models/ClientInfoModel\";\r\nimport { clearCart } from \"../Redux/Actions/CartAction\";\r\nimport { SignupModel } from \"../Models/SignupModel\";\r\n\r\n// static class for data streams\r\nexport default class GlobalDataStreamer {\r\n\r\n    /*                      ADMIN METHODS \r\n    ****************************************************************/\r\n    public static async fetchAllCustomers() {\r\n        this.emitToast(\"fetchAllCustomer\", \"Fetching customers ...\");\r\n        await axios.get(globals.urls.customers, this.appendBody()).then((response) => {\r\n            toast.dismiss(\"fetchAllCustomer\");\r\n            store.dispatch(fetchAllCustomers(response.data));\r\n        })\r\n            .catch((error) => {\r\n                this.errorToast(\"fetchAllCustomer\", error);\r\n            });\r\n    }\r\n\r\n    public static async fetchAllCompanies() {\r\n        this.emitToast(\"fetchAllCompanies\", \"Fetching companies ...\");\r\n        await axios.get<CompanyModel[]>(globals.urls.companies, this.appendBody()).then((response) => {\r\n            toast.dismiss(\"fetchAllCompanies\");\r\n            store.dispatch(fetchAllCompanies(response.data));\r\n        })\r\n            .catch((error) => {\r\n                this.errorToast(\"fetchAllCompanies\", error);\r\n            });\r\n    }\r\n\r\n    public static async addCompany(company: ClientInfoModel) {\r\n        this.emitToast(\"addNewCompany\", \"Adding company ...\");\r\n        return axios.post<string>(globals.urls.companies, company, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(\"addNewCompany\", response.data);\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"addNewCompany\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async addCustomer(customer: ClientInfoModel) {\r\n        this.emitToast(\"addNewCustomer\", \"Adding customer ...\");\r\n        return axios.post<string>(globals.urls.customers, customer, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(\"addNewCustomer\", response.data);\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"addNewCustomer\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async deleteCustomer(customerId: number) {\r\n        this.emitToast(customerId, \"Deleting customer...\");\r\n        return axios.delete<string>(globals.urls.customers + \"/\" + customerId, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(customerId, response.data);\r\n                store.dispatch(deleteCustomer(customerId));\r\n                return true;\r\n            })\r\n            .catch((error: any) => this.errorToast(customerId, error));\r\n    }\r\n\r\n    public static async deleteCompany(companyId: number) {\r\n        this.emitToast(companyId, \"Deleting company...\");\r\n        return axios.delete<string>(globals.urls.companies + \"/\" + companyId, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(companyId, response.data);\r\n                store.dispatch(deleteCompany(companyId));\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(companyId, error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async updateCustomer(customer: CustomerModel) {\r\n        this.emitToast(customer.id, \"Updating customer ...\");\r\n        return axios.put<string>(globals.urls.customers, customer, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(customer.id, response.data);\r\n                store.dispatch(updateCustomer(customer));\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(customer.id, error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async updateCompany(company: CompanyModel) {\r\n        this.emitToast(company.id, \"Updating company ...\");\r\n        return axios.put<string>(globals.urls.companies, company, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(company.id, response.data);\r\n                store.dispatch(updateCompany(company));\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(company.id, error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    /*                      CUSTOMER METHODS \r\n    ****************************************************************/\r\n    public static async fetchCouponsByCustomer() {\r\n        return axios.get<CouponModel[]>(globals.urls.customers + \"/coupons\", this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(\"allByCustomer\", \"Your coupons loaded\");\r\n                store.dispatch(fetchCouponsByCustomer(response.data));\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.emitToast(\"allByCustomer\", \"Fetching coupons ...\");\r\n                this.errorToast(\"allByCustomer\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async purchaseCoupons(couponIds: number[]) {\r\n        this.emitToast(\"Purchase\", couponIds.length === 1 ? \"Purchasing coupon ...\" : \"Purchasing coupons ...\");\r\n        return axios.post<string>(globals.urls.purchase, couponIds, this.appendBody())\r\n            .then((response) => {\r\n                store.dispatch(clearCart());\r\n                this.successToast(\"Purchase\", response.data);\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"Purchase\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async dismissAllCoupons() {\r\n        this.emitToast(\"dismissCoupons\", \"Coupons being used...\");\r\n        return axios.delete<string>(globals.urls.customers + \"/coupons/purchased\", this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(\"dismissCoupons\", response.data);\r\n                store.dispatch(dismissAllCoupons());\r\n                return true;\r\n            });\r\n    }\r\n\r\n    /*                      COMPANY METHODS \r\n    ****************************************************************/\r\n\r\n    public static async addCoupon(coupon: CouponModel) {\r\n        this.emitToast(\"addNewCoupon\", \"Adding coupon ...\");\r\n        return axios.post<string>(globals.urls.companies + \"/coupons\", coupon, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(\"addNewCoupon\", response.data);\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"addNewCoupon\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async updateCoupon(coupon: CouponModel) {\r\n        this.emitToast(coupon.id, \"Updating coupon ...\");\r\n        return axios.put<string>(globals.urls.companies + \"/coupons\", coupon, this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(coupon.id, response.data);\r\n                return true;\r\n            })\r\n            .then(() => store.dispatch(updateCoupon((coupon as CouponModel))))\r\n            .catch((error: any) => {\r\n                this.errorToast(coupon.id, error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async deleteCoupon(couponId: number) {\r\n        this.emitToast(couponId, \"Deleting coupon...\");\r\n        axios.delete<string>(globals.urls.companies + \"/coupons/\" + couponId, this.appendBody())\r\n            .then((response) => this.successToast(couponId, response))\r\n            .then(() => store.dispatch(deleteCoupon(couponId)))\r\n            .catch((error: any) => this.errorToast(couponId, error));\r\n    }\r\n\r\n    public static async fetchCouponsByCompany() {\r\n        return axios.get<CouponModel[]>(globals.urls.companies + \"/coupons\", this.appendBody())\r\n            .then((response) => {\r\n                this.successToast(\"allByCompany\", \"Your coupons loaded\");\r\n                store.dispatch(fetchCouponsByCompany(response.data));\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.emitToast(\"allByCompany\", \"Fetching coupons ...\");\r\n                this.errorToast(\"allByCompany\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    /*                      SHARED METHODS \r\n    ****************************************************************/\r\n\r\n    public static async login(login: LoginRequestModel) {\r\n        toast.dismiss();\r\n        this.emitToast(\"Login\", \"Loggin in...\");\r\n        return axios.post<LoginResponseModel>(globals.urls.login, login)\r\n            .then((response) => {\r\n                this.successToast(\"Login\", \"Welcome \" + response.data.name);\r\n                store.dispatch(loginAction(response.data));\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"Login\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async signup(signup: SignupModel) {\r\n        toast.dismiss();\r\n        this.emitToast(\"SignUp\", \"Signing up...\");\r\n        return axios.post<SignupModel>(globals.urls.signup, signup)\r\n            .then((response) => {\r\n                this.successToast(\"SignUp\", response.data.email + \" signed-up successfully\");\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"SignUp\", error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async logout() {\r\n        toast.dismiss();\r\n        this.emitToast(\"Logout\", \"Loggin out...\");\r\n        return axios.delete<string>(globals.urls.logout, this.appendBody())\r\n            .then((response) => {\r\n                this.warnToast(\"Logout\", response.data);\r\n                store.dispatch(logoutAction());\r\n                return true;\r\n            })\r\n            .catch((error: any) => {\r\n                toast.dismiss(\"Logout\");\r\n                return false;\r\n            });\r\n    }\r\n\r\n    public static async extendTokenExpiration() {\r\n        return axios.put<boolean>(globals.urls.extendToken, {}, this.appendBody()).then((response) => {\r\n            return response.data;\r\n        }).catch((error: any) => {\r\n            this.emitToast(\"extendingToken\", \"\");\r\n            this.errorToast(\"extendingToken\", error);\r\n            return false;\r\n        })\r\n    }\r\n\r\n    public static async fetchClientInfo() {\r\n        axios.get<ClientInfoModel>(globals.urls.clientInfo, this.appendBody())\r\n            .then((response) => store.dispatch(requestInfo(response.data)))\r\n            .catch((error: any) => {\r\n                this.emitToast(\"fetchClient\", \"\");\r\n                this.errorToast(\"fetchClient\", error);\r\n            });\r\n    }\r\n\r\n    public static async fetchAllCategories() {\r\n        await axios.get<string[]>(globals.urls.categories).then((repsonse) => {\r\n            store.dispatch(syncCategories(repsonse.data));\r\n        });\r\n    }\r\n\r\n    public static async fetchCouponImage(imageName: string | number) {\r\n        this.emitToast(\"CouponImageFetching\", \"Fetching image...\");\r\n        return axios.get(globals.urls.couponImage + `/${imageName}`, { responseType: \"blob\" })\r\n            .then((response) => {\r\n                this.successToast(\"CouponImageFetching\", \"Fetch successful\");\r\n                return response;\r\n            })\r\n            .catch((error: any) => {\r\n                this.errorToast(\"CouponImageFetching\", error);\r\n                return error;\r\n            });\r\n    }\r\n\r\n    public static async fetchAllCoupons() {\r\n        this.emitToast(\"allCoupons\", \"Fetching coupons...\");\r\n        await axios.get<CouponModel[]>(globals.urls.coupons)\r\n            .then((response) => {\r\n                toast.dismiss(\"allCoupons\");\r\n                store.dispatch(fetchAllCoupons(response.data));\r\n            })\r\n            .catch((error) => {\r\n                this.errorToast(\"allCoupons\", error);\r\n            });\r\n    }\r\n\r\n    /*                      PRIVATE LOCAL METHODS \r\n    ****************************************************************/\r\n    private static appendBody() {\r\n        return {\r\n            headers: {\r\n                \"authorization\": store.getState().currentClientState.token,\r\n                \"clientType\": store.getState().currentClientState.client?.clientType\r\n            }\r\n        }\r\n    }\r\n\r\n    private static emitToast = (toastId: any, onLoading: string) => {\r\n        toast.loading(onLoading, {\r\n            toastId: toastId,\r\n            theme: \"colored\",\r\n            closeOnClick: true,\r\n            autoClose: 5000\r\n        });\r\n    }\r\n\r\n    private static successToast = (toastId: any, response: any) => {\r\n        toast.update(toastId, {\r\n            render: response,\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 5000\r\n        });\r\n    }\r\n\r\n    private static warnToast = (toastId: any, response: any) => {\r\n        toast.update(toastId, {\r\n            render: response,\r\n            type: \"warning\",\r\n            isLoading: false,\r\n            autoClose: 5000\r\n        });\r\n    }\r\n\r\n    private static errorToast = (couponId: any, error: any) => {\r\n        toast.update(couponId, {\r\n            render: error.response !== undefined ? error.response.data : \"No response from server\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 5000\r\n        });\r\n    }\r\n}","import { NavLink } from \"react-router-dom\";\r\nimport { logoutAction } from \"../../../Redux/Actions/ClientAction\";\r\nimport { persistor, store } from \"../../../Redux/Store/Store\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport { RouteUrls } from \"../../../Services/RouteUrls\";\r\nimport \"./Logout.css\";\r\n\r\n// dispatch logout action to server\r\nfunction sendLogout() {\r\n    GlobalDataStreamer.logout();\r\n}\r\n\r\n// clear state in local storage\r\nfunction clearState() {\r\n    persistor.pause();\r\n    persistor.purge();\r\n    persistor.persist();\r\n    store.dispatch(logoutAction());\r\n}\r\n\r\n// logout\r\nexport function logout() {\r\n    sendLogout();\r\n    clearState();\r\n}\r\n\r\nexport default function Logout(): JSX.Element {\r\n    return (\r\n        <section className=\"Logout\">\r\n            <NavLink to={RouteUrls.HOME}>\r\n                <button onClick={() => {\r\n                    logout();\r\n                }} className=\"APP__BUTTON\" type=\"button\">Logout</button>\r\n            </NavLink>\r\n        </section>\r\n    );\r\n}","import { toast } from \"react-toastify\";\r\nimport { logout } from \"../Components/LayoutArea/Logout/Logout\";\r\nimport { extendToken } from \"../Redux/Actions/ClientAction\";\r\nimport { store } from \"../Redux/Store/Store\";\r\nimport GlobalDataStreamer from \"./GlobalDataStreamer\";\r\n\r\nexport default class IdleTimerApi {\r\n\r\n    // this timeout starts when client logged in to system \r\n    private static idleTimeout: NodeJS.Timeout = setTimeout(() => undefined, 0);\r\n\r\n    // this timer starts when client logged in to system \r\n    private static idleIntervalTimerActions: NodeJS.Timeout = setInterval(() => undefined, 0);\r\n\r\n    // this variable represent idle timer value\r\n    private static idleTimer: number = 0;\r\n\r\n    // this variable represent time of interval updates in millis\r\n    private static idleTimerUpdateInterval: number = 1000;\r\n\r\n    // this variable represent clients login time\r\n    private static clientLoginTime: number = -99;\r\n\r\n    // this variable represent threshold when the client will be logged out if idle for amount of time\r\n    private static idleTimerThresholdInterval: number = -99;\r\n\r\n    // this variable mirrors idleTimerThresholdInterval and is used for client notification\r\n    private static initialIdleTimerThresholdInterval: number = 0;\r\n\r\n    // this variable represent threshold when the client will be notified of being idle for too long\r\n    private static emitToastThresholdInterval: number = 0;\r\n\r\n    // this variable represent dynamic range for emitToastThresholdInterval value\r\n    private static emitToastValuePercentage = 0.86; // (1 is 100%)\r\n\r\n    // this variable represent threshold for auto dispatch token update without notice\r\n    private static dispatchTokenUpdateThresholdInterval: number = 0;\r\n\r\n    // this variable represent dynamic range for dispatchTokenUpdateThresholdInterval value\r\n    private static dispatchTokenUpdateValuePercentage = 0.7; // (1 is 100%)\r\n\r\n    /* run this function on mount to check if user session expired\r\n    ****************************************************************************/\r\n    private onMount = (function ifExpired() {\r\n        IdleTimerApi.updateData(); // refresh data\r\n        if (IdleTimerApi.clientLoginTime + IdleTimerApi.idleTimerThresholdInterval > 0) {\r\n            if (Date.now() - IdleTimerApi.clientLoginTime > IdleTimerApi.idleTimerThresholdInterval) {\r\n                IdleTimerApi.logoutAction(false);\r\n            }\r\n        }\r\n    }());\r\n\r\n    /* start idle timer\r\n    ****************************************************************************/\r\n    static startIdleTimer() {\r\n        IdleTimerApi.updateData(); // refresh data\r\n        IdleTimerApi.resetIdleTimeout(); // start idle timeout\r\n    }\r\n\r\n    /* logic of client makes any action on website \r\n    ****************************************************************************/\r\n    static clientMadeAction() {\r\n        // refresh data\r\n        IdleTimerApi.updateData();\r\n        // check if store holds client data\r\n        if (IdleTimerApi.clientLoginTime + IdleTimerApi.idleTimerThresholdInterval > 0) {\r\n            // if session time matches update threshold\r\n            if (Date.now() - IdleTimerApi.clientLoginTime >= IdleTimerApi.dispatchTokenUpdateThresholdInterval) {\r\n                IdleTimerApi.updateLoginTime();\r\n                IdleTimerApi.resetIdleTimeout();\r\n            }\r\n        }\r\n    }\r\n\r\n    /* this function resets and start timer to logout action \r\n    ****************************************************************************/\r\n    private static resetIdleTimeout() {\r\n        /* run this function only if client data is present */\r\n        if (IdleTimerApi.idleTimerThresholdInterval > 0) {\r\n            /* reset data */\r\n            IdleTimerApi.idleTimer = 0;\r\n            clearTimeout(IdleTimerApi.idleTimeout);\r\n            clearInterval(IdleTimerApi.idleIntervalTimerActions);\r\n            /* set logout timeout */\r\n            IdleTimerApi.idleTimeout = setTimeout(() => IdleTimerApi.logoutAction(), IdleTimerApi.idleTimerThresholdInterval);\r\n            /* set idle interval timer */\r\n            IdleTimerApi.idleIntervalTimerActions = setInterval(() => {\r\n                // increment timer\r\n                IdleTimerApi.idleTimer += IdleTimerApi.idleTimerUpdateInterval;\r\n                // check if idle time matches toast emit threshold\r\n                if ((Date.now() - IdleTimerApi.clientLoginTime) >= IdleTimerApi.emitToastThresholdInterval) {\r\n                    // emit toast\r\n                    toast.warn(\"\",\r\n                        {\r\n                            toastId: \"IdleToast\",\r\n                            autoClose: false,\r\n                            theme: \"colored\"\r\n                        });\r\n                    // update toast\r\n                    toast.update(\"IdleToast\",\r\n                        {\r\n                            render: `The system noticed you were idle for too long, \r\n                            please make action or you will be disconnected in ${(IdleTimerApi.idleTimerThresholdInterval - IdleTimerApi.idleTimer) / 1000} seconds`,\r\n                            autoClose: false,\r\n                            theme: \"colored\",\r\n                            type: \"warning\"\r\n                        });\r\n                }\r\n            }, IdleTimerApi.idleTimerUpdateInterval);\r\n        }\r\n    }\r\n\r\n    /* update clients login time\r\n    ****************************************************************************/\r\n    private static updateLoginTime() {\r\n        GlobalDataStreamer.extendTokenExpiration().then((response) => {\r\n            if (response) {\r\n                store.dispatch(extendToken());\r\n                IdleTimerApi.updateData();\r\n                toast.update(\"IdleToast\",\r\n                    {\r\n                        toastId: \"IdleToastReset\",\r\n                        render: \"Thank you, idle time reset\",\r\n                        type: \"success\",\r\n                        autoClose: 10_000,\r\n                        theme: \"colored\"\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /*  this function sets on login or updates data in case client closed or refreshed web page \r\n    ****************************************************************************/\r\n    private static updateData() {\r\n        const response = store.getState().currentClientState;\r\n        if (response !== undefined && response.idleDisconnectIntervalInMillis !== undefined && response.loginTimeInMillis !== undefined) {\r\n            IdleTimerApi.idleTimerThresholdInterval = response.idleDisconnectIntervalInMillis;\r\n            IdleTimerApi.initialIdleTimerThresholdInterval = IdleTimerApi.idleTimerThresholdInterval;\r\n            IdleTimerApi.clientLoginTime = response.loginTimeInMillis;\r\n            IdleTimerApi.emitToastThresholdInterval = IdleTimerApi.idleTimerThresholdInterval * IdleTimerApi.emitToastValuePercentage;\r\n            IdleTimerApi.dispatchTokenUpdateThresholdInterval = IdleTimerApi.idleTimerThresholdInterval * IdleTimerApi.dispatchTokenUpdateValuePercentage;\r\n        } else {\r\n            IdleTimerApi.cancelTimers();\r\n        }\r\n    }\r\n\r\n    private static cancelTimers() {\r\n        clearTimeout(IdleTimerApi.idleTimeout);\r\n        clearInterval(IdleTimerApi.idleIntervalTimerActions);\r\n        IdleTimerApi.idleTimerThresholdInterval = -99;\r\n        IdleTimerApi.clientLoginTime = -99;\r\n        IdleTimerApi.idleTimer = 0;\r\n    }\r\n\r\n    /* logout function \r\n    ****************************************************************************/\r\n    private static logoutAction(dispatchToast?:boolean) {\r\n        // clear values\r\n        IdleTimerApi.cancelTimers();\r\n        // dispatch logout\r\n        logout();\r\n        toast.dismiss();\r\n        // emit client notification\r\n        if(dispatchToast !== false){\r\n            toast.warning(`You were logged out for being idle ${IdleTimerApi.initialIdleTimerThresholdInterval / 60_000} minutes`, {\r\n                toastId: \"IdleLogout\",\r\n                autoClose: false,\r\n                theme: \"colored\"\r\n            });\r\n        }\r\n    }\r\n}","import { useForm } from \"react-hook-form\";\r\nimport { LoginRequestModel } from \"../../../Models/LoginRequestModel\";\r\nimport \"./Login.css\";\r\nimport ApiGlobalLogic from \"../../../Services/ApiGlobalLogic\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport IdleTimerApi from \"../../../Services/IdleTimerApi\";\r\n\r\nexport default function Login(): JSX.Element {\r\n\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm<LoginRequestModel>();\r\n\r\n    const send = (login: LoginRequestModel) => {\r\n        GlobalDataStreamer.login(login).then((response) => {\r\n            if (response) {\r\n                IdleTimerApi.startIdleTimer();\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <section className=\"Login\">\r\n            <div className=\"Login__Form FORM\">\r\n                <h2> Login </h2>\r\n                <form onSubmit={handleSubmit(send)}>\r\n\r\n                    <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.email} type=\"email\" className=\"FIELD\" placeholder=\"email\" {...register(\"email\", {\r\n                        required: { value: true, message: \"Email required\" },\r\n                        minLength: {\r\n                            value: ApiGlobalLogic.forms.fieldsMinLength.email,\r\n                            message: ApiGlobalLogic.errorDescriptions.minLength.email\r\n                        },\r\n                        pattern: {\r\n                            value: ApiGlobalLogic.patterns.regex.email,\r\n                            message: ApiGlobalLogic.errorDescriptions.badPattern.email\r\n                        }\r\n                    })} />\r\n                    {errors.email && <p className=\"Error\">{errors.email.message}</p>}\r\n\r\n                    <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.password} type=\"password\" className=\"FIELD\" placeholder=\"password\" {...register(\"password\", {\r\n                        required: { value: true, message: \"Password required\" }\r\n                    })}\r\n                    />\r\n                    {errors.password && <p className=\"Error\">{errors.password.message}</p>}\r\n\r\n                    <br />\r\n                    <button type=\"reset\" onClick={() => reset()} className=\"BUTTON__AS_LINK\">clear fields</button>\r\n                    <br />\r\n\r\n                    <div>\r\n                        <button type=\"submit\" className=\"APP__BUTTON\">Login</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import { useForm } from \"react-hook-form\";\r\nimport { SignupModel } from \"../../../Models/SignupModel\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\nimport apiGlobalLogic from \"../../../Services/ApiGlobalLogic\";\r\nimport \"./Sign_up.css\";\r\nimport { useState } from \"react\";\r\nimport ApiGlobalLogic from \"../../../Services/ApiGlobalLogic\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\n\r\nexport default function Sign_up(): JSX.Element {\r\n\r\n    const { register, handleSubmit, setValue, reset, formState: { errors } } = useForm<SignupModel>({\r\n        defaultValues: { \"clientType\": ClientType.CUSTOMER }\r\n    });\r\n\r\n    const [clientType, setClientType] = useState(ClientType.CUSTOMER);\r\n\r\n    const send = async (signup: SignupModel) => {\r\n        GlobalDataStreamer.signup(signup);\r\n    }\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\r\n        switch (event.target.value) {\r\n            case \"COMPANY\":\r\n                console.log();\r\n                setValue(\"clientType\", ClientType.COMPANY);\r\n                setClientType(ClientType.COMPANY);\r\n                break;\r\n            default:\r\n                setValue(\"clientType\", ClientType.CUSTOMER);\r\n                setClientType(ClientType.CUSTOMER);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function requiredFields() {\r\n        switch (clientType) {\r\n            case ClientType.CUSTOMER:\r\n                return (<>\r\n                    <input maxLength={ApiGlobalLogic.items.customer.fieldsMaxLength.name} type=\"text\" className=\"FIELD\" placeholder=\"first name\" {...register(\"name\", {\r\n                        required: {\r\n                            value: true,\r\n                            message: \"First name required\"\r\n                        },\r\n                        minLength: apiGlobalLogic.items.customer.fieldsMinLength.name\r\n                    })} />\r\n                    {errors.name && <p className=\"Error\">{errors.name.message}</p>}\r\n\r\n                    <input maxLength={ApiGlobalLogic.items.customer.fieldsMaxLength.name} type=\"text\" className=\"FIELD\" placeholder=\"last name\" {...register(\"lastName\", {\r\n                        required: {\r\n                            value: true,\r\n                            message: \"Last name required\"\r\n                        },\r\n                        minLength: apiGlobalLogic.items.customer.fieldsMinLength.name\r\n                    })} />\r\n                    {errors.lastName && <p className=\"Error\">{errors.lastName.message}</p>}\r\n                </>);\r\n            case ClientType.COMPANY:\r\n                return (<>\r\n                    <input maxLength={ApiGlobalLogic.items.company.fieldsMaxLength.name} type=\"text\" className=\"FIELD\" placeholder=\"company name\" {...register(\"name\", {\r\n                        required: {\r\n                            value: true,\r\n                            message: \"Company name required\"\r\n                        },\r\n                        minLength: apiGlobalLogic.items.company.fieldsMinLength.name\r\n                    })} />\r\n                    {errors.name && <p className=\"Error\">{errors.name.message}</p>}\r\n                </>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Sign_up FORM WHITE__BG\">\r\n            <h2> Sign-up </h2>\r\n            <form onSubmit={handleSubmit(send)}>\r\n\r\n                {requiredFields()}\r\n\r\n                <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.email} type=\"email\" className=\"FIELD\" placeholder=\"email\" {...register(\"email\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Email required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.forms.fieldsMinLength.email,\r\n                        message: `Email must contain at least ${ApiGlobalLogic.forms.fieldsMinLength.email} characters`\r\n\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.email,\r\n                        message: \"Invalid email address\"\r\n                    }\r\n                })} />\r\n                {errors.email && <p className=\"Error\">{errors.email.message}</p>}\r\n\r\n                <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.password} type=\"password\" className=\"FIELD\" placeholder=\"password\" {...register(\"password\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Password required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.forms.fieldsMinLength.password,\r\n                        message: `Password must contain at least ${ApiGlobalLogic.forms.fieldsMinLength.password} characters`\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.password,\r\n                        message: \"Password must include at least one Upper and lower case letter\"\r\n                    }\r\n                })} />\r\n                {errors.password && <p className=\"Error\">{errors.password.message}</p>}\r\n\r\n                <br />\r\n                <button type=\"reset\" onClick={() => {\r\n                    reset();\r\n                    setClientType(ClientType.CUSTOMER);\r\n                }} className=\"BUTTON__AS_LINK\">reset form</button>\r\n                <br />\r\n\r\n                <select className=\"FIELD\" onChange={(event) => handleChange(event)} >\r\n                    <option value={ClientType.CUSTOMER}>Customer</option>\r\n                    <option value={ClientType.COMPANY}>Company</option>\r\n                </select>\r\n                <button type=\"submit\" className=\"FIELD LINK APP__BUTTON\">Sign-up</button>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { ClientType } from \"../../../Models/ClientType\";\r\nimport { CustomerModel } from \"../../../Models/CustomerModel\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport FlipableCard from \"../FlippableSignInCard/FlippableCard\";\r\nimport Login from \"../Login/Login\";\r\nimport Logout from \"../Logout/Logout\";\r\nimport SignUp from \"../Sign_up/Sign_up\";\r\nimport \"./NavBar.css\";\r\n\r\nexport default function NavBar(): JSX.Element {\r\n\r\n    const currentClient = useAppSelector(state => state.currentClientState.client);\r\n\r\n    function renderClientInfo() {\r\n        if (currentClient !== undefined) {\r\n            return <>\r\n                <p>It is a good {timeOfDay()} <span>{nameToCapital(currentClient.name) + \" \" + nameToCapital(currentClient.clientType !== ClientType.COMPANY ? (currentClient as CustomerModel).lastName : \"\")}</span></p> <Logout />\r\n            </>;\r\n        }\r\n        return <>\r\n            {/* <p className=\"EMPHASIZE_TEXT_COLOR\">Good {timeOfDay()} guest, please </p> <Login /> <p>for better user experience</p> */}\r\n            <p >Good {timeOfDay()} guest, please </p>\r\n            <FlipableCard\r\n                mainButtonText=\"Login\"\r\n                frontButtonText={\"Want to sign-up\"}\r\n                backButtonText={\"Want to login\"}\r\n                frontElement={<Login />}\r\n                backElement={<SignUp />}\r\n                buttonStyleClass=\"APP__BUTTON\"\r\n            />\r\n            <p>for shopping experience</p>\r\n        </>;\r\n    }\r\n\r\n    function nameToCapital(name: string) {\r\n        return name.charAt(0).toUpperCase() + name.substring(1).toLowerCase();\r\n    }\r\n\r\n    function timeOfDay() {\r\n        const timeNow = new Date();\r\n        if (timeNow.getHours() >= 21 || timeNow.getHours() < 4) {\r\n            return \"night\";\r\n        } else if (timeNow.getHours() >= 18) {\r\n            return \"evening\";\r\n        } else if (timeNow.getHours() >= 12) {\r\n            return \"afternoon\";\r\n        }\r\n        return \"morning\";\r\n    }\r\n\r\n    return (\r\n        <div className={\"NavBar WHITE__BG\"}>\r\n            {renderClientInfo()}\r\n        </div>\r\n    );\r\n}","import { ClientType } from \"../../../Models/ClientType\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport \"./AddItemElement.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { RouteUrls } from \"../../../Services/RouteUrls\";\r\n\r\ninterface AddItemElementProps {\r\n    clientType: ClientType;\r\n}\r\n\r\nexport default function AddItemElement(props: AddItemElementProps): JSX.Element {\r\n\r\n    function companyOptions() {\r\n        return (\r\n            <>\r\n                <NavLink to={RouteUrls.CREATE_COUPON}>Add coupon</NavLink>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function adminOptions() {\r\n        return (\r\n            <>\r\n                <NavLink to={RouteUrls.CREATE_CUSTOMER}>Add customer</NavLink>\r\n                <NavLink to={RouteUrls.CREATE_COMPANY}>Add company</NavLink>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function render() {\r\n        switch (props.clientType) {\r\n            case ClientType.COMPANY:\r\n                return companyOptions();\r\n            case ClientType.ADMIN:\r\n                return adminOptions();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"AddItemElement DropDown\">\r\n            <button className=\"DropBtn NAV__BUTTON\" >\r\n                <Icon onClick={() => { }} className=\"Menu__button\" component={AddIcon} />\r\n            </button>\r\n            <div className=\"DropDownContent\">\r\n                {render()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import Icon from '@material-ui/core/Icon';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"./Menu.css\";\r\nimport { ClientType } from '../../../Models/ClientType';\r\nimport { useAppSelector } from '../../../Redux/Hooks/hooks';\r\nimport AddItemElement from '../../InputArea/AddItemElement/AddItemElement';\r\nimport { ClientInfoModel } from '../../../Models/ClientInfoModel';\r\n\r\nexport default function Menu(): JSX.Element {\r\n\r\n    const client = useAppSelector(state =>\r\n        state.currentClientState.client\r\n    );\r\n\r\n    return (\r\n        <div className=\"Menu WHITE__BG\">\r\n            <NavLink className=\"NAV__BUTTON\" to=\"/home\">\r\n                <Icon className=\"Menu__button\" component={HomeIcon} />\r\n            </NavLink>\r\n\r\n            {/* display only if active company or admin logged in */}\r\n            {(client as ClientInfoModel)?.active && (client?.clientType === ClientType.ADMIN || client?.clientType === ClientType.COMPANY) &&\r\n                <AddItemElement clientType={client.clientType} />\r\n            }\r\n\r\n            {/* display only if client logged in */}\r\n            {client?.clientType !== undefined &&\r\n                <NavLink className=\"NAV__BUTTON\" to=\"/profile\">\r\n                    <Icon className=\"Menu__button\" component={PersonRoundedIcon} />\r\n                </NavLink>\r\n            }\r\n\r\n            {/* display cart only for customers type */}\r\n            {(client?.clientType === undefined || client?.clientType === ClientType.CUSTOMER) &&\r\n                <NavLink className=\"NAV__BUTTON\" to=\"/cart\">\r\n                    <Icon className=\"Menu__button\" component={ShoppingCartIcon} />\r\n                </NavLink>\r\n            }\r\n        </div>\r\n    );\r\n}","const AppCurrencySymbol = \"₪\";\r\n\r\nexport default AppCurrencySymbol;","import \"./EmptyView.css\";\r\n\r\ninterface EmptyViewProps {\r\n    text?: string;\r\n    state?: \"happy\";\r\n}\r\n\r\nexport default function EmptyView(props: EmptyViewProps): JSX.Element {\r\n\r\n    return (\r\n        <div className=\"EmptyView\">\r\n            {props.state === \"happy\" ? (\r\n                <>\r\n                    <iframe\r\n                        className=\"iframegif\"\r\n                        scrolling=\"no\"\r\n                        src=\"https://c.tenor.com/Ohbgk_umVtgAAAAC/tom-and-jerry-dancing.gif\"\r\n                        width=\"500\"\r\n                        height=\"330\"\r\n                        title=\"Tom and Jerry upset on rails\"\r\n                    >\r\n                    </iframe>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <p className=\"EmptyViewText\">{props.text ? props.text : \"\"}</p>\r\n                    <iframe\r\n                        className=\"iframegif\"\r\n                        scrolling=\"no\"\r\n                        src=\"http://mrwgifs.com/wp-content/uploads/2014/01/Tom-and-Jerry-Depressed-By-On-The-Train-Tracks-In-Sad-Episode.gif\"\r\n                        width=\"480\"\r\n                        height=\"190\"\r\n                        title=\"Tom happy dancing\"\r\n                    >\r\n                    </iframe>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}","import { ChangeEventHandler, useEffect, useState } from \"react\";\r\nimport { FilterType } from \"../../../Models/FilterType\";\r\nimport { addFilter, removeFilter } from \"../../../Redux/Actions/FilterAction\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport \"./CheckBox.css\";\r\n\r\ninterface CheckBoxProps {\r\n    filterKey: FilterType;\r\n    filterValue: string | number;\r\n    changeEventHandler?: ChangeEventHandler;\r\n}\r\n\r\nexport default function CheckBox({ filterKey, filterValue }: CheckBoxProps): JSX.Element {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const isActive = useAppSelector(state =>\r\n        state.filterAppState.filtersActive\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!isActive) {\r\n            setChecked(false);\r\n        }\r\n    }, [isActive])\r\n\r\n    const handleChange = () => {\r\n        setChecked(!checked);\r\n        /* update filters global state */\r\n        if (!checked) {\r\n            store.dispatch(addFilter(filterKey, filterValue));\r\n        } else {\r\n            store.dispatch(removeFilter(filterKey, filterValue));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"CheckBox\">\r\n            <label className=\"container\">\r\n                {filterValue.toString().toLowerCase()}\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={checked}\r\n                    onChange={handleChange}\r\n                />\r\n                <span className=\"checkmark\"></span>\r\n            </label>\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { FilterType } from \"../../../../Models/FilterType\";\r\nimport CheckBox from \"../../../InputArea/CheckBox/CheckBox\";\r\nimport \"./CategoriesFilter.css\";\r\n\r\ninterface CategoriesFilterProps {\r\n    categories: string[];\r\n}\r\n\r\nexport default function CategoriesFilter(props: CategoriesFilterProps): JSX.Element {\r\n\r\n    const [categories, setCategories] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n        setCategories(Array.from(new Set(props.categories)));\r\n    }, [props.categories])\r\n\r\n    return (\r\n        <div className=\"CategoriesFilter\">\r\n            <p>Categories</p>\r\n            {categories.map(c => <CheckBox key={c} filterKey={FilterType.CATEGORIES} filterValue={c} />)}\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { FilterType } from \"../../../../Models/FilterType\";\r\nimport CheckBox from \"../../../InputArea/CheckBox/CheckBox\";\r\nimport \"./CompaniesFilter.css\";\r\n\r\ninterface CompaniesFilterProps {\r\n    companies: string[];\r\n}\r\n\r\nexport default function CompaniesFilter(props: CompaniesFilterProps): JSX.Element {\r\n\r\n    const [companies, setCompanies] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n        setCompanies(Array.from(new Set(props.companies)));\r\n    }, [props.companies])\r\n\r\n    return (\r\n        <div className=\"CompaniesFilter\">\r\n            <p>Companies </p>\r\n            {companies.map(c => <CheckBox key={c} filterKey={FilterType.COMPANIES} filterValue={c} />)}\r\n        </div>\r\n    );\r\n}","import { store } from \"../../../../Redux/Store/Store\";\r\nimport \"./FreeTextFilter.css\";\r\nimport { Control, useForm, useWatch } from \"react-hook-form\";\r\nimport { addFilter } from \"../../../../Redux/Actions/FilterAction\";\r\nimport { FilterType } from \"../../../../Models/FilterType\";\r\nimport { useAppSelector } from \"../../../../Redux/Hooks/hooks\";\r\nimport { useEffect } from \"react\";\r\n\r\ninterface FormInput {\r\n    freeText: string\r\n}\r\n\r\nexport default function FreeTextFilter(): JSX.Element {\r\n\r\n    const { register, control, handleSubmit, reset } = useForm<FormInput>();\r\n\r\n    const isActive = useAppSelector(state =>\r\n        state.filterAppState.filtersActive\r\n    );\r\n\r\n    function FreeTextFilterWatched({ control }: { control: Control<FormInput> }) {\r\n\r\n        const freeText = useWatch({\r\n            control, name: \"freeText\", defaultValue: \"\"\r\n        });\r\n        return <p>Free Text {freeText.length > 0 ? \": \" + freeText : freeText}</p>\r\n    }\r\n\r\n    const onSubmit = (data: FormInput) => {\r\n        store.dispatch(addFilter(FilterType.TEXT, data.freeText));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isActive) {\r\n            reset();\r\n        }\r\n\r\n    }, [isActive, reset])\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"FreeTextFilter\">\r\n            <FreeTextFilterWatched control={control} />\r\n            <input placeholder=\"search query\" maxLength={20} className=\"FIELD\" {...register(\"freeText\")} />\r\n            <button className=\"APP__BUTTON\" type=\"submit\">Submit</button>\r\n\r\n        </form>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { FilterType } from \"../../../../Models/FilterType\";\r\nimport { addFilter } from \"../../../../Redux/Actions/FilterAction\";\r\nimport { useAppSelector } from \"../../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../../Redux/Store/Store\";\r\nimport \"./PriceFilter.css\";\r\n\r\ninterface PriceFilterProps {\r\n    maxNumber: number;\r\n}\r\n\r\nexport default function PriceFilter(props: PriceFilterProps): JSX.Element {\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const isActive = useAppSelector(state =>\r\n        state.filterAppState.filtersActive\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!isActive) {\r\n            setValue(props.maxNumber);\r\n        }\r\n    }, [isActive, props.maxNumber])\r\n\r\n    useEffect(() => {\r\n        setValue(props.maxNumber);\r\n    }, [props.maxNumber])\r\n\r\n    function handleDispatchValue(event: React.MouseEvent<HTMLInputElement>) {\r\n        store.dispatch(addFilter(FilterType.PRICE, evalNumber(event.currentTarget.value)));\r\n    }\r\n\r\n    function handleCHange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setValue(evalNumber(event.currentTarget.value));\r\n    }\r\n\r\n    function evalNumber(number: string | number) {\r\n        if (typeof number === \"number\") {\r\n            return Math.trunc(number);\r\n        }\r\n        return Math.trunc(parseFloat(number));\r\n    }\r\n\r\n    return (\r\n        <div className=\"PriceFilter\">\r\n            <p>Price</p>\r\n            <div className=\"PriceFilterContainer\">\r\n                <input className=\"PriceFilterRange\" onChange={(event) => handleCHange(event)} value={value} onMouseUp={(event) => handleDispatchValue(event)} min={0} max={evalNumber(props.maxNumber) + 1} type=\"range\"></input>\r\n                <span>{value === 0 ? \"Free\" : value}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { store } from \"../../../../Redux/Store/Store\";\r\nimport \"./IdFilter.css\";\r\nimport { Control, useForm, useWatch } from \"react-hook-form\";\r\nimport { addFilter } from \"../../../../Redux/Actions/FilterAction\";\r\nimport { FilterType } from \"../../../../Models/FilterType\";\r\nimport { useAppSelector } from \"../../../../Redux/Hooks/hooks\";\r\nimport { useEffect } from \"react\";\r\n\r\ninterface FormInput {\r\n    id: number\r\n}\r\n\r\nexport default function IdFilter(): JSX.Element {\r\n\r\n    const { register, control, handleSubmit, reset } = useForm<FormInput>();\r\n\r\n    const isActive = useAppSelector(state =>\r\n        state.filterAppState.filtersActive\r\n    );\r\n\r\n    function IdFilterWatched({ control }: { control: Control<FormInput> }) {\r\n\r\n        const id = useWatch({\r\n            control, name: \"id\", defaultValue: -99\r\n        });\r\n        return <p>Clients id {id >= 0 ? \": \" + id : \"\"}</p>\r\n    }\r\n\r\n    const onSubmit = (data: FormInput) => {\r\n        store.dispatch(addFilter(FilterType.ID, data.id));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isActive) {\r\n            reset();\r\n        }\r\n\r\n    }, [isActive, reset])\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"IdFilter\">\r\n            <IdFilterWatched control={control} />\r\n            <input placeholder=\"clients id query\" maxLength={20} className=\"FIELD\" {...register(\"id\")} />\r\n            <button className=\"APP__BUTTON\" type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n}","import { useState } from \"react\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport { clearFilters } from \"../../../Redux/Actions/FilterAction\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport CategoriesFilter from \"../Filters/CategoriesFilter/CategoriesFilter\";\r\nimport CompaniesFilter from \"../Filters/CompaniesFilter/CompaniesFilter\";\r\nimport FreeTextFilter from \"../Filters/FreeTextFilter/FreeTextFilter\";\r\nimport PriceFilter from \"../Filters/PriceFilter/PriceFilter\";\r\nimport \"./FiltersContainer.css\";\r\nimport { CustomerModel } from \"../../../Models/CustomerModel\";\r\nimport { CompanyModel } from \"../../../Models/CompanyModel\";\r\nimport IdFilter from \"../Filters/IdFilter/IdFilter\";\r\n\r\ninterface FiltersContainerProps {\r\n    coupons?: CouponModel[];\r\n    clients?: CustomerModel[] | CompanyModel[];\r\n}\r\n\r\nexport default function FiltersContainer(props: FiltersContainerProps): JSX.Element {\r\n\r\n    const clearFunction = () => {\r\n        store.dispatch(clearFilters());\r\n    }\r\n\r\n    const [view, setView] = useState<string>(\"\");\r\n\r\n    const toggleView = () => {\r\n        if (view === \"ShowFiltersContainer\") {\r\n            setView(\"\");\r\n        } else {\r\n            setView(\"ShowFiltersContainer\");\r\n        }\r\n    }\r\n\r\n    function render() {\r\n        if (props.coupons && props.coupons.length > 0) {\r\n            return (\r\n                <>\r\n                    <CategoriesFilter categories={props.coupons.map(c => c.category)} />\r\n                    <CompaniesFilter companies={props.coupons.map(c => c.companyName)} />\r\n                    <PriceFilter maxNumber={Math.max(...props.coupons.map(c => c.price))} />\r\n                    <FreeTextFilter />\r\n                </>\r\n            );\r\n        } else if (props.clients && props.clients.length > 0) {\r\n            return (\r\n                <>\r\n                    <IdFilter />\r\n                    <FreeTextFilter />\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className={\"FiltersContainerSection\"}>\r\n            <div className={\"FiltersContainer \" + view}>\r\n                <div className=\"FiltersView\">\r\n                    {render()}\r\n                </div>\r\n                <button className=\"ClearFiltersButton APP__BUTTON\" onClick={clearFunction}>Clear filters</button>\r\n            </div>\r\n            <button onClick={() => toggleView()} className=\"FiltersContainerButton  APP__BUTTON\">\r\n                <p className=\"FiltersText\">{\"filters\"}</p>\r\n                <p className=\"FiltersArrow\">{view === \"\" ? \">\" : \"<\"}</p>\r\n            </button>\r\n        </section>\r\n    );\r\n}","import { toast } from \"react-toastify\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport { addToCart } from \"../../../Redux/Actions/CartAction\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport \"./CouponCard.css\";\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport AppCurrencySymbol from \"../../../Services/Currency\";\r\n\r\ninterface CardProps {\r\n    coupon: CouponModel;\r\n}\r\n\r\nexport default function CouponCard(props: CardProps): JSX.Element {\r\n\r\n    function emitToast(coupon: CouponModel) {\r\n        // coupon already in cart case\r\n        if (store.getState().cartAppState.forPurchaseCouponsList.find(c => c.id === coupon.id) !== undefined) {\r\n            toast.warn(\r\n                <div className=\"Toast__element\">\r\n                    <p><span className=\"Coupon__title\">{coupon.title}</span> already in your cart</p>\r\n                </div>, {\r\n                toastId: coupon.id,\r\n                theme: \"colored\"\r\n            });\r\n        }\r\n\r\n        // coupon not in cart case\r\n        else {\r\n            store.dispatch(addToCart(coupon));\r\n            toast.success(\r\n                <div className=\"Toast__element\">\r\n                    <p>\"{coupon.title}\"</p>\r\n                    <p>added to cart</p>\r\n                </div>, {\r\n                theme: \"colored\",\r\n                icon: <Icon component={ShoppingCartIcon} />\r\n            });\r\n        }\r\n    }\r\n\r\n    function validStartDate(): Boolean {\r\n        if (props.coupon && new Date(props.coupon.startDate + \"Z\").getTime() >= Date.now()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function formatDate(date:Date){\r\n        const jsDate = new Date(date + \"Z\");\r\n        const year:number = jsDate.getFullYear();\r\n        const month:number = jsDate.getMonth() + 1;\r\n        const day:number = jsDate.getDate();\r\n        return `${day}.${month}.${year}`;\r\n    }\r\n\r\n    return (\r\n        <div className=\"CouponCard\">\r\n            <div className={\"CouponCardState \" + (validStartDate() ? \"\" : \"ComingSoon\")}>\r\n                <div className=\"ComingSoon_tag\">\r\n                    <p>{`Get me from ${formatDate(props.coupon.startDate)}`}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"CouponCardData\">\r\n                    {validStartDate() && <div className=\"Price_tag\">\r\n                    <p className=\"Price\">{props.coupon.price === 0 ? \"FREE\" : props.coupon.price.toFixed(2) + \" \" + AppCurrencySymbol}</p>\r\n                </div>}\r\n                <div className=\"Image_container\">\r\n                    <img className=\"Image\" src={props.coupon.imageUrl} alt=\"coupon\" />\r\n                </div>\r\n                <div className=\"Text_container\">\r\n                    <p className=\"Title\">{props.coupon.title}</p>\r\n                    <p className=\"Company\">{`By ${props.coupon.companyName}`}</p>\r\n                    <p className=\"Category\">{props.coupon.category}</p>\r\n                    <p className=\"Description\">{props.coupon.description}</p>\r\n                    <p className=\"EndDate\">{`Ends on ${formatDate(props.coupon.endDate)}`}</p>\r\n                </div>\r\n            </div>\r\n            {validStartDate() && <button className=\"CardButton APP__BUTTON\" onClick={() => emitToast(props.coupon)}>Add to Cart</button>}\r\n        </div>\r\n    );\r\n}","import \"./EditableTableRow.css\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { MouseEventHandler, useEffect, useState } from \"react\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport { toast } from \"react-toastify\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport React from \"react\";\r\nimport AppCurrencySymbol from \"../../../Services/Currency\";\r\nimport { CustomerModel } from \"../../../Models/CustomerModel\";\r\nimport { CompanyModel } from \"../../../Models/CompanyModel\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\n\r\ninterface EditableTableRowProps {\r\n    objectModel: \"CouponModel\" | \"CustomerModel\" | \"CompanyModel\";\r\n    object: CouponModel | CustomerModel | CompanyModel;\r\n    ignoreFieldsFunction?: Function;\r\n    nonEditableFields?: string[];\r\n    className?: string;\r\n    tdClassName?: string;\r\n    id?: any;\r\n    inEditMode?: boolean;\r\n    isHeader?: boolean;\r\n    onClick?: MouseEventHandler<HTMLTableRowElement>;\r\n    onSave?: React.Dispatch<React.SetStateAction<any>>;\r\n    preventToast?: boolean;\r\n}\r\n\r\nexport default function EditableTableRow(props: EditableTableRowProps): JSX.Element {\r\n\r\n    const [newObject, setNewObject] = useState<CustomerModel | CouponModel | CompanyModel>({ ...props.object });\r\n\r\n    useEffect(() => {\r\n        props.inEditMode && emitToast();\r\n        toast.update(\"TableEditToast\", {\r\n            render: toastComponent(newObject)\r\n        });\r\n    }, [props.inEditMode, newObject]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const toastComponent = (object: any) => {\r\n        return (\r\n            <div>\r\n                <span>Save / Cancel changes? </span>\r\n                <button\r\n                    onClick={() => {\r\n                        switch (props.objectModel) {\r\n                            case \"CouponModel\":\r\n                                GlobalDataStreamer.updateCoupon(object).then((result) => {\r\n                                    if (result) {\r\n                                        props.onSave && props.onSave(0);\r\n                                    }\r\n                                });\r\n                                break;\r\n                            case \"CustomerModel\":\r\n                                GlobalDataStreamer.updateCustomer(object).then((result) => {\r\n                                    if (result) {\r\n                                        props.onSave && props.onSave(0);\r\n                                    }\r\n                                });\r\n                                break;\r\n                            case \"CompanyModel\":\r\n                                GlobalDataStreamer.updateCompany(object).then((result) => {\r\n                                    if (result) {\r\n                                        props.onSave && props.onSave(0);\r\n                                    }\r\n                                });\r\n                                break;\r\n                        }\r\n                    }}\r\n                    className=\"Toast__button\" ><Icon component={CheckIcon} />\r\n                </button>\r\n                <button\r\n                    className=\"Toast__button\"\r\n                    onClick={() => {\r\n                        if (props.onSave) {\r\n                            setNewObject(props.object);\r\n                            props.onSave(0); // cancel editing\r\n                        }\r\n                    }}>\r\n                    <Icon component={CloseIcon} />\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function emitToast() {\r\n        toast.warning(\r\n            toastComponent, {\r\n            toastId: \"TableEditToast\",\r\n            theme: \"colored\",\r\n            position: \"top-center\",\r\n            autoClose: false\r\n        });\r\n    }\r\n\r\n    const setNewObjectValue = (key: any, value: any) => {\r\n        const map: Map<any, any> = new Map(Object.entries(newObject));\r\n        map.set(key, value);\r\n        setNewObject(Object.fromEntries(map));\r\n    }\r\n\r\n    /* if amount or price is zero or end date is near, set warn class\r\n   ----------------------------------------------------------------------- */\r\n    function setWarningClass(key: string, value: any) {\r\n        const timeNowInMillis = Date.parse(new Date().toLocaleDateString());\r\n        if (value === 0) {\r\n            return \" Warn\";\r\n        } else if (key.toLowerCase().includes(\"enddate\")) {\r\n            if (Date.parse(new Date(value).toLocaleDateString()) < timeNowInMillis) {\r\n                return \" Warn\";\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /*  set cell width\r\n    ****************************************************************************************************/\r\n    function setCellWidth(value: string) {\r\n        const length = value.toLowerCase().replaceAll(\" \", \"\").length;\r\n        if (length <= 2) {\r\n            return { width: \"20%\" }\r\n        } else if (length <= 10) {\r\n            return { width: \"30%\" }\r\n        } else if (length <= 20) {\r\n            return { width: \"50%\" }\r\n        } else {\r\n            return { width: \"50%\" }\r\n        }\r\n    }\r\n\r\n    /*  return proper input field depending on type\r\n    ****************************************************************************************************/\r\n    function inputByValueType(key: string, value: any) {\r\n        if (key.toLowerCase().includes(\"date\")) {\r\n            return <input\r\n                type=\"date\"\r\n                defaultValue={`${value}`}\r\n                onBlur={(event) => {\r\n                    setNewObjectValue(key, event.target.value);\r\n                }}\r\n                onKeyDown={(event) => {\r\n                    if (event.key === \"Enter\") {\r\n                        (event.target as HTMLInputElement).blur();\r\n                    }\r\n                }} />\r\n        } else if (key.includes(\"price\")) {\r\n            return <input\r\n                step=\"any\"\r\n                type=\"number\"\r\n                defaultValue={`${value}`}\r\n                onBlur={(event) => {\r\n                    setNewObjectValue(key, event.target.value);\r\n                }}\r\n                onKeyDown={(event) => {\r\n                    if (event.key === \"Enter\") {\r\n                        (event.target as HTMLInputElement).blur();\r\n                    }\r\n                }} />\r\n        } else if (key.includes(\"amount\")) {\r\n            return <input\r\n                step=\"1\"\r\n                type=\"number\"\r\n                defaultValue={`${value}`}\r\n                onBlur={(event) => {\r\n                    setNewObjectValue(key, event.target.value);\r\n                }}\r\n                onKeyDown={(event) => {\r\n                    if (event.key === \"Enter\") {\r\n                        (event.target as HTMLInputElement).blur();\r\n                    }\r\n                }} />\r\n        } else if (key.includes(\"category\")) {\r\n            return (\r\n                <select\r\n                    onBlur={(event) => {\r\n                        setNewObjectValue(key, event.target.value);\r\n                    }}\r\n                    onKeyDown={(event) => {\r\n                        if (event.key === \"Enter\") {\r\n                            (event.target as HTMLInputElement).blur();\r\n                        }\r\n                    }}\r\n                    defaultValue={value} >\r\n                    {store.getState().categoriesAppState.categories.map(category =>\r\n                        <option\r\n                            key={category}\r\n                            value={category}>\r\n                            {category}\r\n                        </option>)}\r\n                </select>\r\n            )\r\n        } else if (key.toLowerCase().includes(\"clienttype\")) {\r\n            const clientTypes: string[] = Object.keys(ClientType).filter(key => typeof key === \"string\");\r\n            return (\r\n                <select\r\n                    onBlur={(event) => {\r\n                        setNewObjectValue(key, event.target.value);\r\n                    }}\r\n                    onKeyDown={(event) => {\r\n                        if (event.key === \"Enter\") {\r\n                            (event.target as HTMLInputElement).blur();\r\n                        }\r\n                    }}\r\n                    defaultValue={value} >\r\n                    {clientTypes.map(clientType =>\r\n                        <option\r\n                            key={clientType}\r\n                            value={clientType}>\r\n                            {clientType}\r\n                        </option>)}\r\n                </select>\r\n            )\r\n        } else if (key.toLowerCase().includes(\"active\")) {\r\n            return (\r\n                <select\r\n                    onBlur={(event) => {\r\n                        setNewObjectValue(key, event.target.value);\r\n                    }}\r\n                    onKeyDown={(event) => {\r\n                        if (event.key === \"Enter\") {\r\n                            (event.target as HTMLInputElement).blur();\r\n                        }\r\n                    }}\r\n                    defaultValue={value} >\r\n                    <option\r\n                        key={\"false\"}\r\n                        value={\"false\"}>\r\n                        {\"False\"}\r\n                    </option>\r\n                    <option\r\n                        key={\"true\"}\r\n                        value={\"true\"}>\r\n                        {\"True\"}\r\n                    </option>\r\n                </select>\r\n\r\n            )\r\n        }\r\n        return <input\r\n            type=\"text\"\r\n            defaultValue={`${value}`}\r\n            onBlur={(event) => {\r\n                setNewObjectValue(key, event.target.value);\r\n            }}\r\n            onKeyDown={(event) => {\r\n                if (event.key === \"Enter\") {\r\n                    (event.target as HTMLInputElement).blur();\r\n                }\r\n            }} />\r\n    }\r\n\r\n    /*  checks if value allowed to be edited\r\n    ****************************************************************************************************/\r\n    function editableValueValidation(value: string) {\r\n        if (props.nonEditableFields !== undefined && props.nonEditableFields.includes(value)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*  render logic\r\n    ****************************************************************************************************/\r\n    function render() {\r\n        let counter = 1;\r\n        const keyValueArrays = props.ignoreFieldsFunction !== undefined ? Array.from((props.ignoreFieldsFunction(props.object) as Map<string, any>).entries()) : Array.from(Object.entries(props.object));\r\n        // check if data represent a header\r\n        if (props.isHeader) {\r\n            // const keyValueArrays = props.ignoreFieldsFunction !== undefined ?  Array.from((props.ignoreFieldsFunction(props.object) as Map<string, any>).entries()) : Array.from(Object.entries(props.object));\r\n            return (\r\n                keyValueArrays.map(([key, value]) => <th\r\n                    style={setCellWidth(`${value}`)}\r\n                    key={props.object.id + counter++}\r\n                    className=\"EditableTH\"\r\n                >{key}</th>)\r\n            );\r\n        }\r\n\r\n        // if in edit mode\r\n        else if (props.inEditMode) {\r\n            // const keyValueArrays = props.ignoreFieldsFunction !== undefined ?  Array.from((props.ignoreFieldsFunction(props.object) as Map<string, any>).entries()) : Array.from(Object.entries(props.object));\r\n            return (\r\n                keyValueArrays.map(([key, value]) => {\r\n                    // editable fields case\r\n                    if (editableValueValidation(key)) {\r\n                        return (\r\n                            <td\r\n                                className={\"EditableTD \" + props.tdClassName}\r\n                                style={setCellWidth(`${value}`)}\r\n                                key={props.object.id + counter++}>\r\n                                {inputByValueType(key, value)}\r\n                            </td>\r\n                        )\r\n                    }\r\n                    // non editable fields case\r\n                    return (\r\n                        <td\r\n                            className={\"EditableTD \" + props.tdClassName}\r\n                            style={setCellWidth(`${value}`)}\r\n                            key={props.object.id + counter++}>\r\n                            {`${value}` + (key.includes(\"price\") ? AppCurrencySymbol : \"\")}\r\n                        </td>\r\n                    )\r\n                })\r\n            );\r\n        }\r\n\r\n        // other cases\r\n        return (\r\n            keyValueArrays.map(([key, value]) => {\r\n                if (key.toLowerCase().includes(\"image\")) {\r\n                    return (\r\n                        <td\r\n                            className={\"EditableTD \" + props.tdClassName}\r\n                            key={props.object.id + counter++}>\r\n                            {<img className=\"EditableTDImage\" src={value} alt=\"coupon\" />}\r\n                        </td>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <td\r\n                        className={\"EditableTD \" + props.tdClassName + setWarningClass(key, value)}\r\n                        key={props.object.id + counter++}>\r\n                        {`${value}` + (key.includes(\"price\") ? AppCurrencySymbol : \"\")}\r\n                    </td>\r\n                );\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <tr\r\n            onClick={props.inEditMode ? () => emitToast() : props.onClick}\r\n            id={props.id}\r\n            onKeyDown={(event) => {\r\n                if (event.key === \"Escape\") {\r\n                    if (props.onSave) {\r\n                        setNewObject(props.object);\r\n                        props.onSave(0); // cancel editing\r\n                    }\r\n                }\r\n            }}\r\n            className={(props.className ? props.className : \"\") + (props.inEditMode ? \" TrInEdit \" : \" \") + (\"\")}>\r\n            {render()}\r\n        </tr>\r\n    )\r\n}","import { toast } from \"react-toastify\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport \"./CouponsContainer.css\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport { deleteFromCart } from \"../../../Redux/Actions/CartAction\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport { useEffect, useState } from \"react\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport FiltersContainer from \"../../FiltersArea/FiltersContainer/FiltersContainer\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport CouponCard from \"../CouponCard/CouponCard\";\r\nimport EditableTableRow from \"../../InputArea/EditableTableRow/EditableTableRow\";\r\n\r\ninterface ContainerProps {\r\n    couponsList: CouponModel[]; // coupons list\r\n    editable?: boolean; // allow coupons to be edited\r\n    asList?: boolean; // show coupons as list instead of cards\r\n    onlyValid?: boolean; // omit coupons with zero amount and expired date\r\n    ignoreFields?: string[]; // omit specified fields when rendering coupons\r\n    insteadOfDisplayedText?: string; \r\n    preventToast?: boolean;\r\n}\r\n\r\nexport default function CouponsContainer(props: ContainerProps): JSX.Element {\r\n    // sets edit mode\r\n    const [editCouponWithId, setEditCouponWithId] = useState<number>(0);\r\n\r\n    // coupons state\r\n    const [coupons, setCoupons] = useState<CouponModel[]>([]);\r\n\r\n    // store filters subscribe\r\n    const appfilters = useAppSelector(state => state.filterAppState);\r\n\r\n    /* this function filters coupon list by active filters and props\r\n    ----------------------------------------------------------------------- */\r\n    const filterCoupons =\r\n        (coupons: CouponModel[]) => {\r\n            let filteredList;\r\n            // skip coupons that are expired or amount is zero\r\n            if (props.onlyValid) {\r\n                const timeNowInMillis = Date.parse(new Date().toLocaleDateString());\r\n                filteredList = coupons.filter(c => {\r\n                    if (c.amount === 0) {\r\n                        return false;\r\n                    } else if (Date.parse(new Date(c.endDate).toLocaleDateString()) < timeNowInMillis) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                );\r\n            } else {\r\n                filteredList = coupons;\r\n            }\r\n\r\n            // filter by categories and companies\r\n            if (appfilters.categoriesList.length > 0 || appfilters.companiesList.length > 0) {\r\n                if (appfilters.categoriesList.length > 0 && appfilters.companiesList.length > 0) {\r\n                    filteredList = filteredList.filter((c) =>\r\n                        appfilters.categoriesList.includes(c.category) &&\r\n                        appfilters.companiesList.includes(c.companyName));\r\n                } else if (appfilters.categoriesList.length > 0) {\r\n                    filteredList = filteredList.filter((c) =>\r\n                        appfilters.categoriesList.includes(c.category));\r\n                } else {\r\n                    filteredList = filteredList.filter((c) =>\r\n                        appfilters.companiesList.includes(c.companyName));\r\n                }\r\n            }\r\n            // filter by price\r\n            if (appfilters.priceList >= 0) {\r\n                filteredList = filteredList.filter((c) => c.price <= appfilters.priceList);\r\n            }\r\n            //filter by free text\r\n            if (appfilters.freeText.length > 0) {\r\n                filteredList = filteredList.filter((c) =>\r\n                    c.title.toLowerCase().includes(appfilters.freeText) || c.description?.toLowerCase().includes(appfilters.freeText)\r\n                );\r\n            }\r\n            return filteredList;\r\n        } // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    /* this function creates a map of filtered values by provided props\r\n    ----------------------------------------------------------------------- */\r\n    function filteredMapFromObject(model: CouponModel): Map<string, any> {\r\n        const tempMapArray: Map<string, any> = new Map();\r\n        if (model === undefined) {\r\n            return tempMapArray;\r\n        }\r\n        mainLoop: for (const [key, value] of Object.entries(model)) {\r\n            // ignore keys with object by default\r\n            if ((typeof value === \"object\" && key.toLowerCase() !== \"image\") || value === undefined) {\r\n                continue;\r\n            }\r\n            //check for ignored fields\r\n            if (props.ignoreFields !== undefined && props.ignoreFields.length > 0) {\r\n                for (const ignored of props.ignoreFields) {\r\n                    if (key.toLowerCase() === ignored) {\r\n                        continue mainLoop;\r\n                    }\r\n                }\r\n            }\r\n            tempMapArray.set(key, value);\r\n        }\r\n        return tempMapArray;\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"HERE 1\");\r\n        if (props.couponsList && props.couponsList.length > 0) {\r\n            setCoupons(filterCoupons(props.couponsList).sort(() => Math.random() - 0.5));\r\n        } else {\r\n            setCoupons([]);\r\n        }\r\n    }, [props.couponsList, appfilters]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    /* This function invoked on list render\r\n    ----------------------------------------------------------------------- */\r\n    function renderAsList() {\r\n        if (coupons.length > 0) {\r\n            let counter = 1;\r\n            return (\r\n                <table className=\"Coupons__table\">\r\n                    <thead>\r\n                        <EditableTableRow\r\n                            key={counter++}\r\n                            object={coupons[0]}\r\n                            objectModel={\"CouponModel\"}\r\n                            isHeader={true}\r\n                            ignoreFieldsFunction={filteredMapFromObject}\r\n                        />\r\n                    </thead>\r\n                    <tbody>\r\n                        {coupons.map(coupon =>\r\n                            coupon.id === editCouponWithId ?\r\n                                // in edit mode\r\n                                <EditableTableRow\r\n                                    key={coupon.id}\r\n                                    object={coupon}\r\n                                    objectModel={\"CouponModel\"}\r\n                                    ignoreFieldsFunction={filteredMapFromObject}\r\n                                    inEditMode={true}\r\n                                    tdClassName=\"table__center_text\"\r\n                                    nonEditableFields={[\"id\"]}\r\n                                    onSave={setEditCouponWithId} \r\n                                    preventToast={props.preventToast}\r\n                                />\r\n                                :\r\n                                // display mode\r\n                                <EditableTableRow\r\n                                    key={coupon.id}\r\n                                    object={coupon}\r\n                                    objectModel={\"CouponModel\"}\r\n                                    onClick={() => emitToast(coupon)} \r\n                                    ignoreFieldsFunction={filteredMapFromObject}\r\n                                    tdClassName=\"table__center_text\"\r\n                                    nonEditableFields={[\"id\"]}\r\n                                    onSave={setEditCouponWithId} \r\n                                    preventToast={props.preventToast}\r\n                                />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n    }\r\n\r\n    /* This function invoked on cards render\r\n    ----------------------------------------------------------------------- */\r\n    function renderAsCards() {\r\n        if (coupons.length > 0) {\r\n            return coupons.map(c => <CouponCard coupon={c} key={c.id} />);\r\n        }\r\n    }\r\n\r\n    /* This function invoked when coupons list is empty\r\n    ----------------------------------------------------------------------- */\r\n    function renderEmptyView() {\r\n        return (\r\n            <EmptyView\r\n                text={\r\n                    store.getState().filterAppState.filtersActive\r\n                        ? \"No matching coupons, try changing filters\"\r\n                        : \"No coupons left\"\r\n                }\r\n            />\r\n        );\r\n    }\r\n\r\n    /* This function invoked when inside cart delete action happens\r\n    ----------------------------------------------------------------------- */\r\n    function deleteFromCartHandler(coupon: CouponModel) {\r\n        toast.dismiss(coupon.id);\r\n        store.dispatch(deleteFromCart(coupon));\r\n    }\r\n\r\n    /* emiting toast component\r\n    ----------------------------------------------------------------------- */\r\n    const emitToast = (coupon: CouponModel) => {\r\n        if(props.preventToast){\r\n            return;\r\n        }\r\n        toast.dismiss(); // close previous toasts\r\n        toast.warning(\r\n            () => {\r\n                // Editable case\r\n                if (props.editable) {\r\n                    return (\r\n                        <div>\r\n                            <span>\r\n                                Coupon id{\" \"}\r\n                                <span className=\"Coupon__title\">\r\n                                    '{coupon.id}'\r\n                                </span>{\" \"}\r\n                                action\r\n                            </span>\r\n\r\n                            {/* edit button */}\r\n                            <button\r\n                                onClick={() => {\r\n                                    setEditCouponWithId(coupon.id);\r\n                                    toast.dismiss(coupon.id);\r\n                                }}\r\n                                className=\"Toast__button\">\r\n                                {\" \"}\r\n                                <Icon component={EditIcon} />\r\n                            </button>\r\n\r\n                            {/* delete button */}\r\n                            <button\r\n                                onClick={() => {\r\n                                    GlobalDataStreamer.deleteCoupon(coupon.id);\r\n                                    toast.dismiss(coupon.id);\r\n                                    setEditCouponWithId(-1);\r\n                                }}\r\n                                className=\"Toast__button\">\r\n                                {\" \"}\r\n                                <Icon component={DeleteIcon} />\r\n                            </button>\r\n                        </div>\r\n                    );\r\n                }\r\n                // Non editable case\r\n                return (\r\n                    <div>\r\n                        <span>\r\n                            Delete coupon{\" \"}\r\n                            <span className=\"Coupon__title\">\r\n                                '{coupon.title}'\r\n                            </span>{\" \"}\r\n                            ?\r\n                        </span>\r\n                        <button\r\n                            onClick={() => deleteFromCartHandler(coupon)}\r\n                            className=\"Toast__button\">\r\n                            {\" \"}\r\n                            <Icon component={CheckIcon} />{\" \"}\r\n                        </button>\r\n                        <button\r\n                            onClick={() => toast.dismiss(coupon.id)}\r\n                            className=\"Toast__button\">\r\n                            {\" \"}\r\n                            <Icon component={CloseIcon} />{\" \"}\r\n                        </button>\r\n                    </div>\r\n                );\r\n            },\r\n            // toast properties\r\n            {\r\n                toastId: coupon.id, // prevent duplicate\r\n                position: \"top-center\",\r\n                theme: \"colored\",\r\n                autoClose: 10000,\r\n                hideProgressBar: false,\r\n                closeOnClick: false,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            }\r\n        );\r\n    };\r\n\r\n    /* render logic\r\n    ----------------------------------------------------------------------- */\r\n    const render = () => {\r\n        // if props are empty or undefined\r\n        if (!props.couponsList || props.couponsList.length === 0) {\r\n            return renderEmptyView();\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"CouponsCounter\">\r\n                    <p>\r\n                        {coupons.length + \" coupon\" +\r\n                            (coupons.length === 1 ? \" \" : \"s \") +\r\n                            (props.insteadOfDisplayedText ? props.insteadOfDisplayedText : \"displayed\")}\r\n                    </p>\r\n                </div>\r\n                <div className=\"CouponsView\">\r\n                    {props.asList ? renderAsList() : renderAsCards()}\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    /* paint component\r\n    ----------------------------------------------------------------------- */\r\n    return (\r\n        <div className=\"CouponsContainer\">\r\n           {(props.couponsList && props.couponsList.length) > 0 && <FiltersContainer\r\n                coupons={props.couponsList} />}\r\n            <div >\r\n                {coupons.length > 0 ? render() : renderEmptyView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { toast } from \"react-toastify\";\r\nimport { clearCart, deleteInBatchFromCart } from \"../../../Redux/Actions/CartAction\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport AppCurrencySymbol from \"../../../Services/Currency\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport CouponsContainer from \"../../CouponsArea/CouponsContainer/CouponsContainer\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport \"./Cart.css\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\n\r\nexport default function Cart(): JSX.Element {\r\n    const coupons = useAppSelector(\r\n        (state) => state.cartAppState.forPurchaseCouponsList\r\n    );\r\n\r\n    const [state, setState] = useState<\"happy\" | undefined>(undefined);\r\n\r\n    const removeExpiredCoupons = useCallback(() => {\r\n        const timeNowInMillis = Date.parse(new Date().toLocaleDateString());\r\n        const toDelete: number[] = [];\r\n        for (const c of coupons) {\r\n            if (\r\n                Date.parse(new Date(c.endDate).toLocaleDateString()) <\r\n                timeNowInMillis\r\n            ) {\r\n                toDelete.push(c.id);\r\n            }\r\n        }\r\n        store.dispatch(deleteInBatchFromCart(toDelete));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        removeExpiredCoupons();\r\n    }, [removeExpiredCoupons]);\r\n\r\n    function buyHandler() {\r\n        if (store.getState().currentClientState.client) {\r\n            const toPurchase = coupons.map((c) => c.id);\r\n            GlobalDataStreamer.purchaseCoupons(toPurchase).then((result) => {\r\n                if (result) {\r\n                    setState(\"happy\");\r\n                }\r\n            });\r\n        } else {\r\n            toast.warn(\"You must be logged in for making purchases\", {\r\n                toastId: \"NotLoggedInToast\",\r\n                theme: \"colored\",\r\n            });\r\n        }\r\n    }\r\n\r\n    function clearCartHandler() {\r\n        toast.warning(\r\n            <div>\r\n                <span>All coupons will be deleted from your cart</span>\r\n                <button\r\n                    onClick={() => store.dispatch(clearCart())}\r\n                    className=\"Toast__button\"\r\n                >\r\n                    <Icon component={CheckIcon} />\r\n                </button>\r\n                <button\r\n                    onClick={() => toast.dismiss(\"Cart_Clean\")}\r\n                    className=\"Toast__button\"\r\n                >\r\n                    <Icon component={CloseIcon} />\r\n                </button>\r\n            </div>,\r\n            {\r\n                toastId: \"Cart_Clean\",\r\n                theme: \"colored\",\r\n                position: \"top-center\",\r\n                autoClose: 10000,\r\n            }\r\n        );\r\n    }\r\n\r\n    function classNameHandler() {\r\n        if (coupons.length > 0) {\r\n            return \"\";\r\n        } else {\r\n            return \"DISABLED__BUTTON\";\r\n        }\r\n    }\r\n\r\n    function isDisabledHandler() {\r\n        if (coupons.length > 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Cart\">\r\n            {coupons.length > 0 ? (\r\n                <CouponsContainer\r\n                    couponsList={coupons}\r\n                    asList={true}\r\n                    ignoreFields={[\r\n                        \"startdate\",\r\n                        \"amount\",\r\n                        \"id\",\r\n                        \"companyentity\",\r\n                        \"companyemail\",\r\n                    ]}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <EmptyView state={state} text=\"Your cart is empty\" />\r\n                </>\r\n            )}\r\n\r\n            <div className=\"Button__Container\">\r\n                <button\r\n                    disabled={isDisabledHandler()}\r\n                    onClick={() => buyHandler()}\r\n                    className={\"APP__BUTTON \" + classNameHandler()}\r\n                >\r\n                    Buy\r\n                </button>\r\n                <p className=\"CartInfoField\">\r\n                    {coupons.length}{\" \"}\r\n                    {coupons.length === 1 ? (\r\n                        <span>coupon</span>\r\n                    ) : (\r\n                        <span>coupons</span>\r\n                    )}{\" \"}\r\n                    in cart\r\n                </p>\r\n                <p className=\"CartInfoField\">\r\n                    Total price{\" \"}\r\n                    {coupons.reduce(\r\n                        (sum, currentCoupon) => sum + currentCoupon.price,\r\n                        0\r\n                    ).toFixed(2)}\r\n                    {AppCurrencySymbol}\r\n                </p>\r\n                <button\r\n                    disabled={isDisabledHandler()}\r\n                    onClick={() => clearCartHandler()}\r\n                    className={\"APP__BUTTON \" + classNameHandler()}\r\n                >\r\n                    Clear cart\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useForm } from \"react-hook-form\";\r\nimport { ClientInfoModel } from \"../../../Models/ClientInfoModel\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\nimport ApiGlobalLogic from \"../../../Services/ApiGlobalLogic\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport \"./CreateCompanyForm.css\";\r\n\r\nexport default function CreateCompanyForm(): JSX.Element {\r\n\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm<ClientInfoModel>({\r\n        defaultValues: { clientType: ClientType.COMPANY, active: true },\r\n    });\r\n\r\n    const send = (company: ClientInfoModel) => {\r\n        GlobalDataStreamer.addCompany(company);\r\n    }\r\n\r\n    return (\r\n        <div className=\"CreateCompanyForm FORM\">\r\n            <h2> Create new company </h2>\r\n            <form onSubmit={handleSubmit(send)}>\r\n\r\n                {/* company name */}\r\n                <input maxLength={ApiGlobalLogic.items.company.fieldsMaxLength.name} type=\"text\" className=\"FIELD\" placeholder=\"company name\" {...register(\"name\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Company name required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.items.company.fieldsMinLength.name,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.companyName\r\n                    }\r\n                })} />\r\n                {errors.name && <p className=\"Error\">{errors.name.message}</p>}\r\n\r\n                {/* company email */}\r\n                <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.email} type=\"email\" className=\"FIELD\" placeholder=\"company email\" {...register(\"email\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Company email required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.forms.fieldsMinLength.email,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.email\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.email,\r\n                        message: ApiGlobalLogic.errorDescriptions.badPattern.email\r\n                    }\r\n                })} />\r\n                {errors.email && <p className=\"Error\">{errors.email.message}</p>}\r\n\r\n                {/* company password */}\r\n                <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.password} type=\"text\" className=\"FIELD\" placeholder=\"company password\" {...register(\"password\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Company password required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.forms.fieldsMinLength.password,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.password\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.password,\r\n                        message: ApiGlobalLogic.errorDescriptions.badPattern.password\r\n                    }\r\n                })} />\r\n                {errors.password && <p className=\"Error\">{errors.password.message}</p>}\r\n\r\n                <br />\r\n                <button\r\n                    type=\"reset\"\r\n                    onClick={() => {\r\n                        reset();\r\n                    }}\r\n                    className=\"BUTTON__AS_LINK\">reset form</button>\r\n                <br />\r\n\r\n                <button type=\"submit\" className=\"FIELD LINK APP__BUTTON\">Create</button>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport ApiGlobalLogic from \"../../../Services/ApiGlobalLogic\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport \"./CreateCouponForm.css\";\r\n\r\nexport default function CreateCouponForm(): JSX.Element {\r\n\r\n    const [categories] = useState<string[]>(store.getState().categoriesAppState.categories);\r\n\r\n    const client = useAppSelector(state =>\r\n        state.currentClientState.client\r\n    );\r\n\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm<CouponModel>({\r\n        defaultValues: { company: client },\r\n    });\r\n\r\n    const send = (coupon: CouponModel) => {\r\n        GlobalDataStreamer.addCoupon(coupon);\r\n    }\r\n\r\n    return (\r\n        <div className=\"CreateCouponForm FORM\">\r\n            <h2> Create new coupon </h2>\r\n            <form onSubmit={handleSubmit(send)}>\r\n\r\n\r\n                <select className=\"SELECT\" {...register(\"category\", {\r\n                    required: true,\r\n                })}>\r\n                    {categories.map(category => <option key={category} value={category}>{category}</option>)}\r\n                </select>\r\n\r\n                {/* title */}\r\n                <input maxLength={ApiGlobalLogic.items.coupon.fieldsMaxLength.title} type=\"text\" className=\"FIELD\" placeholder=\"title\" {...register(\"title\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Title required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMinLength.title,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.couponTitle\r\n                    },\r\n                    maxLength: {\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMaxLength.title,\r\n                        message: ApiGlobalLogic.errorDescriptions.maxLength.title\r\n                    }\r\n                })} />\r\n                {errors.title && <p className=\"Error\">{errors.title.message}</p>}\r\n\r\n                {/* description */}\r\n                <input maxLength={ApiGlobalLogic.items.coupon.fieldsMaxLength.description} type=\"text\" className=\"FIELD\" placeholder=\"description\" {...register(\"description\", {\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMinLength.description,\r\n                        message: `Description must contain at least ${ApiGlobalLogic.items.coupon.fieldsMinLength.description} characters`\r\n                    },\r\n                    maxLength: {\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMaxLength.description,\r\n                        message: ApiGlobalLogic.errorDescriptions.maxLength.description\r\n                    }\r\n                })} />\r\n                {errors.description && <p className=\"Error\">{errors.description.message}</p>}\r\n\r\n                {/* start date */}\r\n                <input type=\"date\" className=\"FIELD\" placeholder=\"start date\" {...register(\"startDate\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Start date required\"\r\n                    }\r\n                })} />\r\n                {errors.startDate && <p className=\"Error\">{errors.startDate.message}</p>}\r\n\r\n                {/* end date */}\r\n                <input type=\"date\" className=\"FIELD\" placeholder=\"end date\" {...register(\"endDate\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"End date required\"\r\n                    }\r\n                })} />\r\n                {errors.endDate && <p className=\"Error\">{errors.endDate.message}</p>}\r\n\r\n                {/* amount */}\r\n                <input step=\"any\" min={ApiGlobalLogic.items.coupon.fieldsMinLength.amount} type=\"number\" className=\"FIELD\" placeholder=\"amount\" {...register(\"amount\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Amount required\"\r\n                    },\r\n                    max:{\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMaxLength.amount,\r\n                        message: ApiGlobalLogic.errorDescriptions.maxLength.amount\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.numbers,\r\n                        message: ApiGlobalLogic.errorDescriptions.badPattern.amount\r\n                    }\r\n                })} />\r\n                {errors.amount && <p className=\"Error\">{errors.amount.message}</p>}\r\n\r\n                {/* price */}\r\n                <input step=\"any\" min={ApiGlobalLogic.items.coupon.fieldsMinLength.price} max={ApiGlobalLogic.items.coupon.fieldsMaxLength.price} type=\"number\" className=\"FIELD\" placeholder=\"price\" {...register(\"price\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Price required\"\r\n                    },\r\n                    min: {\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMinLength.price,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.price\r\n                    },\r\n                    max: {\r\n                        value: ApiGlobalLogic.items.coupon.fieldsMaxLength.price,\r\n                        message: ApiGlobalLogic.errorDescriptions.maxLength.price\r\n                    }\r\n                })} />\r\n                {errors.price && <p className=\"Error\">{errors.price.message}</p>}\r\n\r\n                {/* image */}\r\n                <input type=\"text\" className=\"FIELD\" placeholder=\"image url\" {...register(\"imageUrl\", {\r\n                })} />\r\n\r\n                <button\r\n                    type=\"reset\"\r\n                    onClick={() => {\r\n                        reset();\r\n                    }} className=\"BUTTON__AS_LINK\">reset form</button>\r\n                <br />\r\n                <button type=\"submit\" className=\"FIELD LINK APP__BUTTON\">Create</button>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { useForm } from \"react-hook-form\";\r\nimport { ClientInfoModel } from \"../../../Models/ClientInfoModel\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\nimport ApiGlobalLogic from \"../../../Services/ApiGlobalLogic\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport \"./CreateCustomerForm.css\";\r\n\r\nexport default function CreateCustomerForm(): JSX.Element {\r\n\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm<ClientInfoModel>({\r\n        defaultValues: { clientType: ClientType.CUSTOMER, active: true },\r\n    });\r\n\r\n    const send = (customer: ClientInfoModel) => {\r\n        GlobalDataStreamer.addCustomer(customer);\r\n    }\r\n\r\n    return (\r\n        <div className=\"CreateCustomerForm FORM\">\r\n            <h2> Create new customer </h2>\r\n            <form onSubmit={handleSubmit(send)}>\r\n\r\n                {/* customers first name */}\r\n                <input maxLength={ApiGlobalLogic.items.customer.fieldsMaxLength.name} type=\"text\" className=\"FIELD\" placeholder=\"customers first name\" {...register(\"firstName\" as \"name\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Customers first name required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.items.customer.fieldsMinLength.name,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.customerName\r\n                    }\r\n                })} />\r\n                {errors.name && <p className=\"Error\">{errors.name.message}</p>}\r\n\r\n                {/* customers last name */}\r\n                <input maxLength={ApiGlobalLogic.items.customer.fieldsMaxLength.name} type=\"text\" className=\"FIELD\" placeholder=\"customers last name\" {...register(\"lastName\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Customers last name required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.items.customer.fieldsMinLength.name,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.customerName\r\n                    }\r\n                })} />\r\n                {errors.lastName && <p className=\"Error\">{errors.lastName.message}</p>}\r\n\r\n                {/* company email */}\r\n                <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.email} type=\"email\" className=\"FIELD\" placeholder=\"customers email\" {...register(\"email\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Customers email required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.forms.fieldsMinLength.email,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.email\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.email,\r\n                        message: ApiGlobalLogic.errorDescriptions.badPattern.email\r\n                    }\r\n                })} />\r\n                {errors.email && <p className=\"Error\">{errors.email.message}</p>}\r\n\r\n                {/* company password */}\r\n                <input maxLength={ApiGlobalLogic.forms.fieldsMaxLength.password} type=\"text\" className=\"FIELD\" placeholder=\"customers password\" {...register(\"password\", {\r\n                    required: {\r\n                        value: true,\r\n                        message: \"Customers password required\"\r\n                    },\r\n                    minLength: {\r\n                        value: ApiGlobalLogic.forms.fieldsMinLength.password,\r\n                        message: ApiGlobalLogic.errorDescriptions.minLength.password\r\n                    },\r\n                    pattern: {\r\n                        value: ApiGlobalLogic.patterns.regex.password,\r\n                        message: ApiGlobalLogic.errorDescriptions.badPattern.password\r\n                    }\r\n                })} />\r\n                {errors.password && <p className=\"Error\">{errors.password.message}</p>}\r\n\r\n                <br />\r\n                <button\r\n                    type=\"reset\"\r\n                    onClick={() => {\r\n                        reset();\r\n                    }}\r\n                    className=\"BUTTON__AS_LINK\">reset form</button>\r\n                <br />\r\n\r\n                <button type=\"submit\" className=\"FIELD LINK APP__BUTTON\">Create</button>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}","import { toast } from \"react-toastify\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { CompanyModel } from \"../../../Models/CompanyModel\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport { CustomerModel } from \"../../../Models/CustomerModel\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\n\r\ninterface EmitActionToastProps {\r\n    object: CouponModel | CompanyModel | CustomerModel;\r\n    model: \"CouponModel\" | \"CustomerModel\" | \"CompanyModel\";\r\n    editCallback: Function;\r\n    editCallbackParam: any;\r\n    nonEditableCallbackFunction?: Function;\r\n    nonEditableFunctionParam?: any;\r\n    deleteCallback: Function;\r\n    deleteCallbackParam: any;\r\n    isEditable: boolean;\r\n}\r\n\r\nconst emitActionToast = (props: EmitActionToastProps) => {\r\n    toast.dismiss(); // close previous toasts\r\n    toast.warning(\r\n        () => {\r\n            // Editable case\r\n            if (props.isEditable) {\r\n                switch (props.model) {\r\n                    case \"CouponModel\":\r\n                        return (\r\n                            <div>\r\n                                {/* message */}\r\n                               {message()}\r\n\r\n                                {/* edit button */}\r\n                                <button\r\n                                    onClick={() => {\r\n                                        props.editCallback(props.editCallbackParam);\r\n                                        toast.dismiss(props.object.id);\r\n                                    }}\r\n                                    className=\"Toast__button\">\r\n                                    {\" \"}\r\n                                    <Icon component={EditIcon} />\r\n                                </button>\r\n\r\n                                {/* delete button */}\r\n                                <button\r\n                                    onClick={() => {\r\n                                        GlobalDataStreamer.deleteCoupon(props.object.id);\r\n                                        toast.dismiss(props.object.id);\r\n                                        props.deleteCallback(-1);\r\n                                    }}\r\n                                    className=\"Toast__button\">\r\n                                    {\" \"}\r\n                                    <Icon component={DeleteIcon} />\r\n                                </button>\r\n                            </div>\r\n                        );\r\n                    default:\r\n                        return (\r\n                            <div>\r\n                                {/* message */}\r\n                                {message()}\r\n\r\n                                {/* edit button */}\r\n                                <button\r\n                                    onClick={() => {\r\n                                        props.editCallback(props.editCallbackParam);\r\n                                        toast.dismiss(props.object.id);\r\n                                    }}\r\n                                    className=\"Toast__button\">\r\n                                    {\" \"}\r\n                                    <Icon component={EditIcon} />\r\n                                </button>\r\n\r\n                                {/* delete button */}\r\n                                <button\r\n                                    onClick={() => {\r\n                                        switch (props.model) {\r\n                                            case \"CustomerModel\":\r\n                                                GlobalDataStreamer.deleteCustomer(props.object.id);\r\n                                                break;\r\n                                            case \"CompanyModel\":\r\n                                                GlobalDataStreamer.deleteCompany(props.object.id);\r\n                                                break;\r\n                                            case \"CouponModel\":\r\n                                                GlobalDataStreamer.deleteCoupon(props.object.id);\r\n                                                break;\r\n                                        }\r\n                                        toast.dismiss(props.object.id);\r\n                                        props.deleteCallback(-1);\r\n                                    }}\r\n                                    className=\"Toast__button\">\r\n                                    {\" \"}\r\n                                    <Icon component={DeleteIcon} />\r\n                                </button>\r\n\r\n                                {/* cancel button */}\r\n                                <button\r\n                                    onClick={() => toast.dismiss(props.object.id)}\r\n                                    className=\"Toast__button\">\r\n                                    {\" \"}\r\n                                    <Icon component={CloseIcon} />{\" \"}\r\n                                </button>\r\n                            </div>\r\n                        );\r\n                }\r\n            }\r\n            // Non editable case\r\n            switch (props.model) {\r\n                case \"CouponModel\":\r\n                    return (\r\n                        <div>\r\n                            <span>\r\n                                Delete coupon{\" \"}\r\n                                <span className=\"Coupon__title\">\r\n                                    {(props.object as CouponModel).title}\r\n                                </span>{\" \"}\r\n                                ?\r\n                            </span>\r\n                            <button\r\n                                onClick={() => props.deleteCallback(props.deleteCallbackParam)}\r\n                                className=\"Toast__button\">\r\n                                {\" \"}\r\n                                <Icon component={CheckIcon} />{\" \"}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => toast.dismiss(props.object.id)}\r\n                                className=\"Toast__button\">\r\n                                {\" \"}\r\n                                <Icon component={CloseIcon} />{\" \"}\r\n                            </button>\r\n                        </div>\r\n                    );\r\n                default:\r\n\r\n            }\r\n\r\n        },\r\n        // toast properties\r\n        {\r\n            toastId: props.object.id, // prevent duplicate\r\n            position: \"top-center\",\r\n            theme: \"colored\",\r\n            autoClose: false,\r\n            hideProgressBar: false,\r\n            closeOnClick: false,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        }\r\n    );\r\n\r\n    function message() {\r\n        let clientTypeString = undefined;\r\n        switch (props.model) {\r\n            case \"CompanyModel\":\r\n                clientTypeString = \"Company\";\r\n                break;\r\n            case \"CustomerModel\":\r\n                clientTypeString = \"Customer\";\r\n                break;\r\n            case \"CouponModel\":\r\n                clientTypeString = \"Coupon\";\r\n                break;\r\n        }\r\n        return (\r\n            <span >\r\n                {`${clientTypeString} `}\r\n                <span className=\"Coupon__title\">\r\n                    {`id ${props.object.id}`}\r\n                </span>\r\n                {`action`}\r\n            </span>\r\n        );\r\n    }\r\n};\r\n\r\nexport default emitActionToast;","import { useEffect, useState } from \"react\";\r\nimport { CompanyModel } from \"../../../Models/CompanyModel\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport FiltersContainer from \"../../FiltersArea/FiltersContainer/FiltersContainer\";\r\nimport EditableTableRow from \"../../InputArea/EditableTableRow/EditableTableRow\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport emitActionToast from \"../../SharedArea/Toasts/EmitActionToast\";\r\nimport \"./CompaniesContainer.css\";\r\n\r\ninterface CompaniesContainerProps {\r\n    companiesList: CompanyModel[];\r\n    ignoreFields?: string[];\r\n}\r\n\r\nexport default function CompaniesContainer(props: CompaniesContainerProps): JSX.Element {\r\n\r\n    // sets edit mode\r\n    const [editCompanyWithId, setEditCompanyWithId] = useState<number>(0);\r\n\r\n    // store filters subscribe\r\n    const appfilters = useAppSelector(state => state.filterAppState);\r\n\r\n    // customers state\r\n    const [companies, setCompanies] = useState<CompanyModel[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (props.companiesList && props.companiesList.length > 0) {\r\n            setCompanies(filterCustomers(props.companiesList));\r\n        } else {\r\n            setCompanies([]);\r\n        }\r\n    }, [props.companiesList, appfilters]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const filterCustomers =\r\n        (companies: CompanyModel[]) => {\r\n            let filteredList = companies;\r\n\r\n            //filter by id\r\n            if (appfilters.id >= 0) {\r\n                filteredList = filteredList.filter(c => c.id === appfilters.id);\r\n            }\r\n\r\n            //filter by free text\r\n            if (appfilters.freeText.length > 0) {\r\n                filteredList = filteredList.filter((c) =>\r\n                    c.name.toLowerCase().includes(appfilters.freeText) || c.name?.toLowerCase().includes(appfilters.freeText) || c.email.toLowerCase().includes(appfilters.freeText)\r\n                );\r\n            }\r\n            return filteredList;\r\n        } // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function filteredMapFromObject(model: CompanyModel): Map<string, any> {\r\n        const tempMapArray: Map<string, any> = new Map();\r\n        if (model === undefined) {\r\n            return tempMapArray;\r\n        }\r\n        mainLoop: for (const [key, value] of Object.entries(model)) {\r\n            // ignore keys with object by default\r\n            if ((typeof value === \"object\" && key.toLowerCase() !== \"image\") || value === undefined) {\r\n                continue;\r\n            }\r\n            //check for ignored fields\r\n            if (props.ignoreFields !== undefined && props.ignoreFields.length > 0) {\r\n                for (const ignored of props.ignoreFields) {\r\n                    if (key.toLowerCase() === ignored) {\r\n                        continue mainLoop;\r\n                    }\r\n                }\r\n            }\r\n            tempMapArray.set(key, value);\r\n        }\r\n        return tempMapArray;\r\n    }\r\n\r\n    function renderEmptyView() {\r\n        return (\r\n            <EmptyView\r\n                text={\r\n                    store.getState().filterAppState.filtersActive\r\n                        ? \"No matching companies, try changing filters\"\r\n                        : \"No companies left\"\r\n                }\r\n            />\r\n        );\r\n    }\r\n\r\n    const render = () => {\r\n        let counter = 1;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"CompaniesCounter\">\r\n                    <p>\r\n                        {companies.length + \" compan\" +\r\n                            (companies.length === 1 ? \"y\" : \"ies\") +\r\n                            \" displayed\"}\r\n                    </p>\r\n                </div>\r\n                <table className=\"Coupons__table\">\r\n                    <thead>\r\n                        <EditableTableRow\r\n                            key={counter++}\r\n                            object={companies[0]}\r\n                            ignoreFieldsFunction={filteredMapFromObject}\r\n                            objectModel={\"CompanyModel\"}\r\n                            isHeader={true}\r\n                        />\r\n                    </thead>\r\n                    <tbody>\r\n                        {companies.map(company =>\r\n                            company.id === editCompanyWithId ?\r\n                                // in edit mode\r\n                                <EditableTableRow\r\n                                    key={company.id}\r\n                                    object={company}\r\n                                    objectModel={\"CompanyModel\"}\r\n                                    inEditMode={true}\r\n                                    tdClassName=\"table__center_text\"\r\n                                    nonEditableFields={[\"id\", \"clientType\", \"name\"]}\r\n                                    ignoreFieldsFunction={filteredMapFromObject}\r\n                                    onSave={setEditCompanyWithId}\r\n                                />\r\n                                :\r\n                                // display mode\r\n                                <EditableTableRow\r\n                                    key={company.id}\r\n                                    object={company}\r\n                                    objectModel={\"CompanyModel\"}\r\n                                    ignoreFieldsFunction={filteredMapFromObject}\r\n                                    onClick={() => emitActionToast({\r\n                                        object: company,\r\n                                        model: \"CompanyModel\",\r\n                                        editCallback: setEditCompanyWithId,\r\n                                        editCallbackParam: company.id,\r\n                                        deleteCallback: setEditCompanyWithId,\r\n                                        deleteCallbackParam: -1,\r\n                                        isEditable: true\r\n                                    })}\r\n                                    tdClassName=\"table__center_text\"\r\n                                    nonEditableFields={[\"id\", \"clienttype\"]}\r\n                                    onSave={setEditCompanyWithId}\r\n                                />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"CompaniesContainer\">\r\n            {(props.companiesList && props.companiesList.length > 0) && <FiltersContainer\r\n                clients={props.companiesList} />}\r\n            <div className=\"CompaniesView\">\r\n                {companies.length > 0 ? render() : renderEmptyView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { CustomerModel } from \"../../../Models/CustomerModel\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport FiltersContainer from \"../../FiltersArea/FiltersContainer/FiltersContainer\";\r\nimport EditableTableRow from \"../../InputArea/EditableTableRow/EditableTableRow\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport emitActionToast from \"../../SharedArea/Toasts/EmitActionToast\";\r\nimport \"./CustomersContainer.css\";\r\n\r\ninterface CustomersContainerProps {\r\n    customersList: CustomerModel[];\r\n    ignoreFields?: string[];\r\n}\r\n\r\nexport default function CustomersContainer(props: CustomersContainerProps): JSX.Element {\r\n\r\n    // sets edit mode\r\n    const [editCustomerWithId, setEditCustomerWithId] = useState<number>(0);\r\n\r\n    // store filters subscribe\r\n    const appfilters = useAppSelector(state => state.filterAppState);\r\n\r\n    // customers state\r\n    const [customers, setCustomers] = useState<CustomerModel[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (props.customersList && props.customersList.length > 0) {\r\n            setCustomers(filterCustomers(props.customersList));\r\n        } else {\r\n            setCustomers([]);\r\n        }\r\n    }, [props.customersList, appfilters]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const filterCustomers =\r\n        (customers: CustomerModel[]) => {\r\n            let filteredList = customers;\r\n\r\n            //filter by id\r\n            if (appfilters.id >= 0) {\r\n                filteredList = filteredList.filter(c => c.id === appfilters.id);\r\n            }\r\n\r\n            //filter by free text\r\n            if (appfilters.freeText.length > 0) {\r\n                filteredList = filteredList.filter((c) =>\r\n                    c.name.toLowerCase().includes(appfilters.freeText) || c.lastName?.toLowerCase().includes(appfilters.freeText) || c.email.toLowerCase().includes(appfilters.freeText)\r\n                );\r\n            }\r\n            return filteredList;\r\n        } // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function filteredMapFromObject(model: CustomerModel): Map<string, any> {\r\n        const tempMapArray: Map<string, any> = new Map();\r\n        if (model === undefined) {\r\n            return tempMapArray;\r\n        }\r\n        mainLoop: for (const [key, value] of Object.entries(model)) {\r\n            // ignore keys with object by default\r\n            if ((typeof value === \"object\" && key.toLowerCase() !== \"image\") || value === undefined) {\r\n                continue;\r\n            }\r\n            //check for ignored fields\r\n            if (props.ignoreFields !== undefined && props.ignoreFields.length > 0) {\r\n                for (const ignored of props.ignoreFields) {\r\n                    if (key.toLowerCase() === ignored) {\r\n                        continue mainLoop;\r\n                    }\r\n                }\r\n            }\r\n            tempMapArray.set(key, value);\r\n        }\r\n        return tempMapArray;\r\n    }\r\n\r\n    function renderEmptyView() {\r\n        return (\r\n            <EmptyView\r\n                text={\r\n                    store.getState().filterAppState.filtersActive\r\n                        ? \"No matching customers, try changing filters\"\r\n                        : \"No customers left\"\r\n                }\r\n            />\r\n        );\r\n    }\r\n\r\n    const render = () => {\r\n        let counter = 1;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"CustomersCounter\">\r\n                    <p>\r\n                        {customers.length + \" customer\" +\r\n                            (customers.length === 1 ? \"\" : \"s\") +\r\n                            \" displayed\"}\r\n                    </p>\r\n                </div>\r\n                <table className=\"Coupons__table\">\r\n                    <thead>\r\n                        <EditableTableRow\r\n                            key={counter++}\r\n                            object={customers[0]}\r\n                            ignoreFieldsFunction={filteredMapFromObject}\r\n                            objectModel={\"CustomerModel\"}\r\n                            isHeader={true}\r\n                        />\r\n                    </thead>\r\n                    <tbody>\r\n                        {customers.map(customer =>\r\n                            customer.id === editCustomerWithId ?\r\n                                // in edit mode\r\n                                <EditableTableRow\r\n                                    key={customer.id}\r\n                                    object={customer}\r\n                                    objectModel={\"CustomerModel\"}\r\n                                    ignoreFieldsFunction={filteredMapFromObject}\r\n                                    inEditMode={true}\r\n                                    tdClassName=\"table__center_text\"\r\n                                    nonEditableFields={[\"id\", \"clientType\"]}\r\n                                    onSave={setEditCustomerWithId}\r\n                                />\r\n                                :\r\n                                // display mode\r\n                                <EditableTableRow\r\n                                    key={customer.id}\r\n                                    object={customer}\r\n                                    objectModel={\"CustomerModel\"}\r\n                                    ignoreFieldsFunction={filteredMapFromObject}\r\n                                    onClick={() => emitActionToast({\r\n                                        object: customer,\r\n                                        model: \"CustomerModel\",\r\n                                        editCallback: setEditCustomerWithId,\r\n                                        editCallbackParam: customer.id,\r\n                                        deleteCallback: setEditCustomerWithId,\r\n                                        deleteCallbackParam: -1,\r\n                                        isEditable: true\r\n                                    })}\r\n                                    tdClassName=\"table__center_text\"\r\n                                    nonEditableFields={[\"id\"]}\r\n                                    onSave={setEditCustomerWithId}\r\n                                />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"CustomersContainer\">\r\n            {(props.customersList && props.customersList.length > 0) && <FiltersContainer\r\n                clients={props.customersList} />}\r\n            <div className=\"CustomersView\">\r\n                {customers.length > 0 ? render() : renderEmptyView()}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport CompaniesContainer from \"../../CompaniesArea/CompaniesContainer/CompaniesContainer\";\r\nimport CustomersContainer from \"../../CustomersArea/CustomersContainer/CustomersContainer\";\r\nimport \"./ClientsContainer.css\";\r\n\r\nexport default function ClientsContainer(): JSX.Element {\r\n\r\n    const allCustomers = useAppSelector(state =>\r\n        state.customersAppState.appCustomersList\r\n    );\r\n\r\n    const allCompanies = useAppSelector(state =>\r\n        state.companiesAppState.appCompaniesList\r\n    );\r\n\r\n    return (\r\n        <div className=\"ClientsContainer\">\r\n            <CustomersContainer customersList={allCustomers} ignoreFields={[\"name\"]} />\r\n            <CompaniesContainer companiesList={allCompanies} ignoreFields={[\"lastname\"]} />\r\n        </div>\r\n    );\r\n}","import { useEffect } from \"react\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport CouponsContainer from \"../../CouponsArea/CouponsContainer/CouponsContainer\";\r\nimport \"./MainView.css\";\r\nimport { CouponModel } from \"../../../Models/CouponModel\";\r\nimport { CompanyModel } from \"../../../Models/CompanyModel\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport ClientsContainer from \"../ClientsContainer/ClientsContainer\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport { clearFilters } from \"../../../Redux/Actions/FilterAction\";\r\n\r\nexport default function MainView(): JSX.Element {\r\n\r\n    const client = useAppSelector(state =>\r\n        state.currentClientState.client\r\n    );\r\n\r\n    const clientCoupons: CouponModel[] = useAppSelector(state =>\r\n        state.clientCouponsState.clientCouponsList\r\n    );\r\n\r\n    const appCoupons: CouponModel[] = useAppSelector(state =>\r\n        state.couponsAppState.appCouponsList\r\n    );\r\n\r\n    useEffect(() => {\r\n        store.dispatch(clearFilters());\r\n        GlobalDataStreamer.fetchAllCategories();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        switch (client?.clientType) {\r\n            case ClientType.COMPANY:\r\n                if ((client as CompanyModel).active) {\r\n                    GlobalDataStreamer.fetchCouponsByCompany();\r\n                }\r\n                break;\r\n            case ClientType.CUSTOMER:\r\n                GlobalDataStreamer.fetchCouponsByCustomer();\r\n                GlobalDataStreamer.fetchAllCoupons();\r\n                break;\r\n            case ClientType.ADMIN:\r\n                GlobalDataStreamer.fetchAllCustomers();\r\n                GlobalDataStreamer.fetchAllCompanies();\r\n                break;\r\n            default:\r\n                GlobalDataStreamer.fetchAllCoupons();\r\n                break;\r\n        }\r\n    }, [client]);\r\n\r\n    function render() {\r\n        switch (client?.clientType) {\r\n            case ClientType.COMPANY:\r\n                if ((client as CompanyModel).active) {\r\n                    return <CouponsContainer couponsList={clientCoupons} asList={true} editable={true} ignoreFields={[\"companyentity\", \"companyemail\", \"companyname\"]} />;\r\n                } else {\r\n                    return <EmptyView text={\"Your company is pending for admin approval\"} />\r\n                }\r\n            case ClientType.ADMIN:\r\n                return <ClientsContainer />\r\n            default:\r\n                return <CouponsContainer couponsList={appCoupons} onlyValid={true} ignoreFields={[\"companyemail\", \"amount\"]} />;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"MainView\">\r\n            <button\r\n                onClick={() => {\r\n                    document.body.scrollTop = 0;\r\n                    document.documentElement.scrollTop = 0;\r\n                }} \r\n                className=\"APP__BUTTON\">go to top</button>\r\n            {render()}\r\n        </div>\r\n    );\r\n}","import { ClientInfoModel } from \"../../../Models/ClientInfoModel\";\nimport \"./ClientCard.css\";\n\ninterface ClientCardProps {\n    client: ClientInfoModel\n}\n\nexport default function ClientCard(props:ClientCardProps): JSX.Element {\n\n    function camelCaseSplit(word:string){\n        let newWord = \"\";\n        const regex = /[A-Z]/;\n        for(const letter of word){\n            if(regex.test(letter)){\n                newWord += \" \" + letter.toLowerCase();\n            } else {\n                newWord += letter;\n            }\n        }\n        return newWord;\n    }\n\n    function testValue(value:any){\n        if(value < 0 || typeof value === \"object\"){\n            return false;\n        }\n        return true;\n    }\n\n    function renderTable(){\n        const blurStyle = {filter: \"blur(5px)\"};\n        const objectEntries = Object.entries(props.client).filter(([key, value]) => {\n            return testValue(value);\n        });\n\n        return (\n            <table className=\"ClientCardTable\">\n                <thead>\n                    <tr>\n                        {objectEntries.map(([key, ]) => \n                            <td key={key}>\n                                {camelCaseSplit(key)}\n                            </td>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        {objectEntries.map(([key, value]) => \n                            key === \"password\" ? \n                                <td style={blurStyle} key={key + value}>\n                                    {value}\n                                </td>\n                                :\n                                <td style={{textTransform: \"capitalize\"}} key={key + value}>\n                                    {typeof value === \"boolean\" ? value + \"\" : value}\n                                </td>\n                        )}\n                    </tr>\n                </tbody>\n            </table>\n        )\n    }\n    \n    return (\n        <div className=\"ClientCard\">\n            <div className=\"ClientCardTitle\">Client Info</div>\n            {renderTable()}\n        </div>\n    );\n}","import { useEffect } from \"react\";\r\nimport { ClientInfoModel } from \"../../../Models/ClientInfoModel\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport GlobalDataStreamer from \"../../../Services/GlobalDataStreamer\";\r\nimport ClientCard from \"../ClientCard/ClientCard\";\r\nimport CouponsContainer from \"../../CouponsArea/CouponsContainer/CouponsContainer\";\r\nimport \"./ProfileView.css\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport { clearFilters } from \"../../../Redux/Actions/FilterAction\";\r\n\r\nexport default function ProfileView(): JSX.Element {\r\n\r\n    const client = useAppSelector(state =>\r\n        state.currentClientState.client\r\n    );\r\n\r\n    const clientCoupons = useAppSelector(state =>\r\n        state.clientCouponsState.clientCouponsList\r\n    );\r\n\r\n    useEffect(() => {\r\n        store.dispatch(clearFilters());\r\n        GlobalDataStreamer.fetchClientInfo();\r\n        if (client?.clientType === ClientType.CUSTOMER) {\r\n            GlobalDataStreamer.fetchCouponsByCustomer();\r\n        }\r\n    }, [clientCoupons.length, client?.clientType]);\r\n\r\n    function handleClick() {\r\n        GlobalDataStreamer.dismissAllCoupons();\r\n    }\r\n\r\n    function render() {\r\n        return (\r\n            <>\r\n                <ClientCard client={client as ClientInfoModel} />\r\n                {client?.clientType === ClientType.CUSTOMER && ((clientCoupons && clientCoupons.length) > 0 ? <CouponsContainer preventToast={true} asList={true} insteadOfDisplayedText={\"in possession\"} ignoreFields={[\"id\", \"companyemail\", \"startdate\", \"enddate\", \"amount\"]} couponsList={clientCoupons} /> : <EmptyView text=\"you have no purchased coupons\" />)}\r\n                {client?.clientType === ClientType.CUSTOMER && ((clientCoupons && clientCoupons.length) > 0 && <button onClick={() => handleClick()} className=\"APP__BUTTON\">Use my coupons</button>)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"ProfileView\">\r\n            {render()}\r\n        </div>\r\n    );\r\n}","import \"./CreditsPage.css\";\r\n\r\nexport default function CreditsPage(): JSX.Element {\r\n    function credits() {\r\n        return (\r\n            <div>\r\n                <h2>Credits</h2>\r\n\r\n                <p>Patterns provided by\r\n                    <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://www.patterncooler.com/#a12CbADc12Cd12Ce0f0g64h1B07049E71F1ABA4F4i81j0k64l1F4m1F4\"> https://www.patterncooler.com</a>\r\n                </p>\r\n\r\n                <p>Main background provided by\r\n                    <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://bgjar.com/icon-grid\"> https://bgjar.com</a>\r\n                </p>\r\n\r\n                <p>Shadows implementation by\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://tobiasahlin.com/blog/layered-smooth-box-shadows/\"> https://tobiasahlin.com</a>\r\n                </p>\r\n\r\n                <p>Login/Register animation inspired by\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://animista.net/play/basic/flip/flip-vertical-left\"> https://animista.net</a>\r\n                </p>\r\n\r\n                <p>Main title font provided by\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://fonts.google.com/specimen/Oleo+Script+Swash+Caps?thickness=8#standard-styles\"> https://fonts.google.com</a>\r\n                </p>\r\n\r\n                <p>Icons provided by\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://mui.com/components/material-icons/\"> https://mui.com</a>\r\n                </p>\r\n\r\n                <p>Tom and jerry gifs\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"http://mrwgifs.com/wp-content/uploads/2014/01/Tom-and-Jerry-Depressed-By-On-The-Train-Tracks-In-Sad-Episode.gif\"> Tom-and-Jerry-Depressed</a>\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://c.tenor.com/Ohbgk_umVtgAAAAC/tom-and-jerry-dancing.gif\"> Tom-dancing</a>\r\n                </p>\r\n\r\n                <p>Coupon images provided by\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://source.unsplash.com/\"> https://source.unsplash.com/</a>\r\n                </p>\r\n\r\n                <p>John Bryce for providing the Java fullstack course\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.johnbryce.co.il/catalog/hi-tech-courses/java-full-stack-dvelopment\"> https://www.johnbryce.co.il</a>\r\n                </p>\r\n\r\n                <p>And of course Kobi Shasha for changing life\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href=\"https://il.linkedin.com/in/kobishasha\"> https://linkedin.com</a>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // function documentation() {\r\n    //     const features: string[] = [\r\n    //         \"Ability to register as customer or company\",\r\n    //         \"Registering as company requires admin approval\",\r\n    //         \"You can view coupons as unlogined client and add them to cart\",\r\n    //         \"In order to purchase coupons you must login to system\",\r\n    //         \"\"\r\n    //     ];\r\n    //     return (\r\n    //         <div>\r\n    //             <h2>Documentation</h2>\r\n    //             <ul>\r\n    //                 {features.map(feature => <li>{feature}</li>)}\r\n    //             </ul>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n\r\n    return (\r\n        <div className=\"CreditsPage\">\r\n            {credits()}\r\n            {/* {documentation()} */}\r\n        </div>\r\n    );\r\n}","import { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { ClientInfoModel } from \"../../../Models/ClientInfoModel\";\r\nimport { ClientType } from \"../../../Models/ClientType\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { RouteUrls } from \"../../../Services/RouteUrls\";\r\nimport Cart from \"../Cart/Cart\";\r\nimport CreateCompanyForm from \"../../InputArea/CreateCompanyForm/CreateCompanyForm\";\r\nimport CreateCouponForm from \"../../InputArea/CreateCouponForm/CreateCouponForm\";\r\nimport CreateCustomerForm from \"../../InputArea/CreateCustomerForm/CreateCustomerForm\";\r\nimport EmptyView from \"../../SharedArea/EmptyView/EmptyView\";\r\nimport MainView from \"../MainView/MainView\";\r\nimport ProfileView from \"../ProfileView/ProfileView\";\r\nimport CreditsPage from \"../../SharedArea/CreditsPage/CreditsPage\";\r\n\r\nexport default function Routing(): JSX.Element {\r\n    const client = useAppSelector(state =>\r\n        state.currentClientState.client\r\n    );\r\n\r\n    return (\r\n        <div className=\"Routing\">\r\n            <Switch>\r\n                <Route path={RouteUrls.HOME} component={MainView} exact />\r\n                <Route path={\"/credits\"} component={CreditsPage} exact />\r\n                {client !== undefined && <Route path={RouteUrls.PROFILE} component={ProfileView} exact />}\r\n                {(client === undefined || client?.clientType === ClientType.CUSTOMER) && <Route path={RouteUrls.CART} component={Cart} exact />}\r\n                {(client as ClientInfoModel)?.active && client?.clientType === ClientType.COMPANY && <Route path={RouteUrls.CREATE_COUPON} component={CreateCouponForm} exact />}\r\n                {client?.clientType === ClientType.ADMIN && <Route path={RouteUrls.CREATE_COMPANY} component={CreateCompanyForm} exact />}\r\n                {client?.clientType === ClientType.ADMIN && <Route path={RouteUrls.CREATE_CUSTOMER} component={CreateCustomerForm} exact />}\r\n                <Redirect from=\"/\" to={RouteUrls.HOME} exact />\r\n                <Route>\r\n                    <EmptyView text=\"Page not found\" />\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}","import { NavLink } from \"react-router-dom\";\r\nimport \"./Footer.css\";\r\n\r\nexport default function Footer(): JSX.Element {\r\n    return (\r\n        <div className=\"Footer WHITE__BG\">\r\n                <a href=\"https://far-art-portfolio.herokuapp.com/\" target=\"_blank\" rel=\"noreferrer\">This coupon system mockup is a personal project of Artur Farmanov&copy; and is made only for skills demonstration.</a>\r\n                <NavLink to=\"/credits\">To documentation and credits page</NavLink>\r\n        </div>\r\n    );\r\n}","import { ColorPaletteTypes } from \"../../../Models/ColorPaletteTypes\";\r\nimport { changePalette } from \"../../../Redux/Actions/ColorPaletteAction\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\nimport { store } from \"../../../Redux/Store/Store\";\r\nimport NightlightIcon from '@mui/icons-material/Nightlight';\r\nimport WbSunnyIcon from '@mui/icons-material/WbSunny';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport \"./DarkMode.css\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function DarkMode(): JSX.Element {\r\n\r\n    // store color palette subscribe\r\n    const colorPalette = useAppSelector(state => state.colorPaletteState.palette);\r\n\r\n    const [toggled, setToggled] = useState<boolean>(colorPalette === ColorPaletteTypes.NORMAL ? false : true);\r\n\r\n    function clickHandle() {\r\n        isToggled();\r\n        if (colorPalette === ColorPaletteTypes.DARK) {\r\n            store.dispatch(changePalette(ColorPaletteTypes.NORMAL));\r\n        } else {\r\n            store.dispatch(changePalette(ColorPaletteTypes.DARK));\r\n        }\r\n    }\r\n\r\n    function isToggled() {\r\n        if (toggled) {\r\n            setToggled(false);\r\n        } else {\r\n            setToggled(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"DarkMode\">\r\n            <button className=\"DarkModeButton APP__BUTTON\" onClick={() => clickHandle()}>\r\n                <div className={\"DarkModeIconContainer \" + (toggled ? \"DarkModeToggled\" : \"\")} >\r\n                    <Icon className={\"DarkModeIcons NightIcon \" + (toggled ? \"NightIconToggled\" : \"\")} component={NightlightIcon} />\r\n                    <Icon className={\"DarkModeIcons LightIcon \" + (toggled ? \"LightIconDisabled\" : \"\")} component={WbSunnyIcon} />\r\n                </div>\r\n            </button>\r\n        </div>\r\n    );\r\n}","import \"../../../ToastifyNotifications/ToastifyStyle.css\"\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport slide_in_right from \"../../../ToastifyNotifications/ToastTransition\";\r\nimport \"./GlobalStyles.css\";\r\nimport \"./Layout.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Header from \"../Header/Header\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport Menu from \"../Menu/Menu\";\r\nimport Routing from \"../Routing/Routing\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport IdleTimerApi from \"../../../Services/IdleTimerApi\";\r\nimport DarkMode from \"../DarkMode/DarkMode\";\r\nimport { useAppSelector } from \"../../../Redux/Hooks/hooks\";\r\n\r\nexport default function Layout(): JSX.Element {\r\n\r\n    // store color palette subscribe\r\n    const colorPalette = useAppSelector(state => state.colorPaletteState.palette);\r\n\r\n    /* init Idle timer api class */\r\n    new IdleTimerApi();\r\n\r\n    return (\r\n        <div onClick={() => IdleTimerApi.clientMadeAction()} className=\"Layout\" color-palette={colorPalette}>\r\n            <DarkMode />\r\n            <ToastContainer\r\n                limit={7}\r\n                autoClose={3000}\r\n                transition={slide_in_right}\r\n                pauseOnHover={false}\r\n            />\r\n            <header>\r\n                <Header />\r\n            </header>\r\n            <nav>\r\n                <NavBar />\r\n                <Menu />\r\n            </nav>\r\n            <main>\r\n                <Routing />\r\n            </main>\r\n            <footer>\r\n                <Footer />\r\n            </footer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Layout from './Components/LayoutArea/Layout/Layout';\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from './Redux/Store/Store';\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <PersistGate persistor={persistor}>\r\n          <Layout />\r\n        </PersistGate>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}